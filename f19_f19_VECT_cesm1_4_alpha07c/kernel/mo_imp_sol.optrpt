
    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: mo_imp_sol._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mo_imp_sol._) [1/4=25.0%] mo_imp_sol.F90(11,14)

===========================================================================

Begin optimization report for: MO_IMP_SOL::IMP_SOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_IMP_SOL::IMP_SOL) [2/4=50.0%] mo_imp_sol.F90(53,18)
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) __getsp_inlined
  -> EXTERN: (127,15) INDPRD
  -> EXTERN: (176,21) LINMAT
  -> EXTERN: (187,24) NLNMAT
  -> EXTERN: (191,24) LU_FAC
  -> EXTERN: (196,21) IMP_PROD_LOSS
  -> EXTERN: (205,21) LU_SLV
  -> EXTERN: (207,19) _alloca
  -> EXTERN: (210,22) __getsp_inlined
  -> EXTERN: (210,22) __resetsp_inlined
  -> EXTERN: (224,22) _alloca
  -> EXTERN: (227,25) __getsp_inlined
  -> EXTERN: (227,25) __resetsp_inlined
  -> EXTERN: (232,22) _alloca
  -> EXTERN: (235,25) __getsp_inlined
  -> EXTERN: (235,25) __resetsp_inlined
  -> EXTERN: (299,25) for_write_seq_fmt
  -> EXTERN: (299,25) for_write_seq_fmt_xmit
  -> EXTERN: (341,7) __resetsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mo_imp_sol.F90(139,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(139,13)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(139,13)
      <Multiversioned v2>
         remark #15389: vectorization support: reference sbase_sol has unaligned access
         remark #15389: vectorization support: reference base_sol has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 3.250 
         remark #15478: estimated potential speedup: 1.220 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(139,13)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(158,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(158,16)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(158,16)
      <Multiversioned v2>
         remark #15389: vectorization support: reference solution has unaligned access
         remark #15389: vectorization support: reference base_sol has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 3.250 
         remark #15478: estimated potential speedup: 1.220 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(158,16)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(165,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(165,19)
      remark #15389: vectorization support: reference iter_invariant has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference ind_prd has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 15.000 
      remark #15478: estimated potential speedup: 2.250 
      remark #15479: lightweight vector operations: 6 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(165,19)
   <Remainder>
      remark #15389: vectorization support: reference iter_invariant has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference ind_prd has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(165,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(181,13)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(181,13)
      remark #15389: vectorization support: reference cls_conv has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(181,13)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(199,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(199,19)
      remark #15389: vectorization support: reference forcing has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference iter_invariant has unaligned access
      remark #15389: vectorization support: reference prod has unaligned access
      remark #15389: vectorization support: reference loss has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 23.000 
      remark #15478: estimated potential speedup: 2.280 
      remark #15479: lightweight vector operations: 10 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(199,19)
   <Remainder>
      remark #15389: vectorization support: reference forcing has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference iter_invariant has unaligned access
      remark #15389: vectorization support: reference prod has unaligned access
      remark #15389: vectorization support: reference loss has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(199,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(210,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(207,19)
      remark #15388: vectorization support: reference 160 has aligned access
      remark #15389: vectorization support: reference cls_conv has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 3.960 
      remark #15479: lightweight vector operations: 4 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(207,19)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(208,22)
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference forcing has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 2 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 22 
      remark #15477: vector loop cost: 6.500 
      remark #15478: estimated potential speedup: 3.260 
      remark #15479: lightweight vector operations: 15 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(208,22)
   <Remainder>
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference forcing has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(208,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(210,22)
      remark #15389: vectorization support: reference forcing has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 21 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 4.430 
      remark #15479: lightweight vector operations: 11 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(210,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(237,40)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(224,22)
      remark #15388: vectorization support: reference 174 has aligned access
      remark #15388: vectorization support: reference 174 has aligned access
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 26 
      remark #15477: vector loop cost: 6.500 
      remark #15478: estimated potential speedup: 3.840 
      remark #15479: lightweight vector operations: 15 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(224,22)
   <Remainder>
      remark #15388: vectorization support: reference 174 has aligned access
      remark #15388: vectorization support: reference 174 has aligned access
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(224,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(225,25)
      remark #15389: vectorization support: reference wrk has unaligned access
      remark #15389: vectorization support: reference forcing has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 2 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 37 
      remark #15477: vector loop cost: 29.000 
      remark #15478: estimated potential speedup: 2.490 
      remark #15479: lightweight vector operations: 16 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(225,25)
   <Remainder>
      remark #15389: vectorization support: reference wrk has unaligned access
      remark #15389: vectorization support: reference forcing has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(225,25)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(227,25)
      remark #15389: vectorization support: reference wrk has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 21 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 4.430 
      remark #15479: lightweight vector operations: 11 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(227,25)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(229,40)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_imp_sol.F90(229,40) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(229,40)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(230,22)
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.980 
      remark #15479: lightweight vector operations: 4 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(230,22)
   <Remainder>
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(230,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(231,22)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(231,22)
      <Multiversioned v2>
         remark #15389: vectorization support: reference base_sol has unaligned access
         remark #15389: vectorization support: reference solution has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 3.250 
         remark #15478: estimated potential speedup: 1.220 
         remark #15479: lightweight vector operations: 2 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(231,22)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(232,22)
      remark #15388: vectorization support: reference 206 has aligned access
      remark #15388: vectorization support: reference 206 has aligned access
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 26 
      remark #15477: vector loop cost: 6.500 
      remark #15478: estimated potential speedup: 3.840 
      remark #15479: lightweight vector operations: 15 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(232,22)
   <Remainder>
      remark #15388: vectorization support: reference 206 has aligned access
      remark #15388: vectorization support: reference 206 has aligned access
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(232,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(233,25)
      remark #15389: vectorization support: reference spc_conv has unaligned access
      remark #15389: vectorization support: reference spc_conv has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 28 
      remark #15477: vector loop cost: 51.500 
      remark #15478: estimated potential speedup: 0.540 
      remark #15479: lightweight vector operations: 23 
      remark #15480: medium-overhead vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(233,25)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(235,25)
      remark #15389: vectorization support: reference spc_conv has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 21 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 5.980 
      remark #15479: lightweight vector operations: 11 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(235,25)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(237,40)
      remark #15389: vectorization support: reference spc_conv has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.230 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(237,40)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(239,33)
   remark #15388: vectorization support: reference converged has aligned access
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 1.350 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=36
LOOP END

LOOP BEGIN at mo_imp_sol.F90(239,33)
<Remainder>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mo_imp_sol.F90(243,19)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_imp_sol.F90(245,39)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 0.620 
      remark #15479: lightweight vector operations: 4 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25438: unrolled without remainder by 2  
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(254,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(254,22)
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.980 
      remark #15479: lightweight vector operations: 4 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(254,22)
   <Remainder>
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15389: vectorization support: reference solution has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(254,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(262,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(262,22)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(262,22)
      <Multiversioned v2>
         remark #15389: vectorization support: reference base_sol has unaligned access
         remark #15389: vectorization support: reference solution has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 3.250 
         remark #15478: estimated potential speedup: 1.220 
         remark #15479: lightweight vector operations: 2 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(262,22)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(297,19)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mo_imp_sol.F90(299,25) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ mo_imp_sol.F90(299,25) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between 9 line 299 and 9 line 299
   remark #15346: vector dependence: assumed OUTPUT dependence between 9 line 299 and 9 line 299
LOOP END

LOOP BEGIN at mo_imp_sol.F90(325,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(325,19)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(325,19)
      <Multiversioned v2>
         remark #15389: vectorization support: reference sbase_sol has unaligned access
         remark #15389: vectorization support: reference base_sol has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 3.250 
         remark #15478: estimated potential speedup: 1.220 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(325,19)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at mo_imp_sol.F90(336,18)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ mo_imp_sol.F90(176,21) ]

   LOOP BEGIN at mo_imp_sol.F90(285,22)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ mo_imp_sol.F90(176,21) ]

      LOOP BEGIN at mo_imp_sol.F90(266,13)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mo_imp_sol.F90(139,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(139,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(139,13):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(158,16):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(158,16):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(158,16):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(181,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(181,13):remark #34026: call to memset implemented as a call to optimized library version
mo_imp_sol.F90(231,22):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(231,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(231,22):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(325,19):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(325,19):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(325,19):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(262,22):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(262,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(262,22):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================

Begin optimization report for: MO_IMP_SOL::KR_EXTERNS_IN_MO_IMP_SOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_IMP_SOL::KR_EXTERNS_IN_MO_IMP_SOL) [3/4=75.0%] mo_imp_sol.F90(344,18)
  -> EXTERN: (349,11) for_read_seq
  -> EXTERN: (351,15) for_read_seq
  -> EXTERN: (352,15) for_read_seq
  -> EXTERN: (353,20) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (355,11) for_read_seq
  -> EXTERN: (357,15) for_read_seq


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mo_imp_sol.F90(353,72)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_imp_sol.F90(353,72) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
LOOP END
===========================================================================

Begin optimization report for: MO_IMP_SOL::KR_EXTERNS_OUT_MO_IMP_SOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_IMP_SOL::KR_EXTERNS_OUT_MO_IMP_SOL) [4/4=100.0%] mo_imp_sol.F90(362,18)

===========================================================================
