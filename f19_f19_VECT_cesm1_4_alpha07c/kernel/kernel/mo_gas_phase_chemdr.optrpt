Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.042 Beta Build 20160315

Compiler options: -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -qopt-report=5 -no-opt-dynamic-align -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source -debug minimal -openmp -free -xMIC-AVX512 -c -o mo_gas_phase_chemdr.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: mo_gas_phase_chemdr._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mo_gas_phase_chemdr._) [1/4=25.0%] mo_gas_phase_chemdr.F90(6,8)


    Report from: Code generation optimizations [cg]

mo_gas_phase_chemdr.F90(6,8):remark #34051: REGISTER ALLOCATION : [mo_gas_phase_chemdr._] mo_gas_phase_chemdr.F90:6

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR) [2/4=50.0%] mo_gas_phase_chemdr.F90(74,12)
  -> EXTERN: (74,12) _alloca
  -> EXTERN: (74,12) _alloca
  -> EXTERN: (74,12) _alloca
  -> EXTERN: (74,12) _alloca
  -> EXTERN: (74,12) _alloca
  -> EXTERN: (74,12) __getsp_inlined
  -> EXTERN: (344,5) for_read_seq
  -> EXTERN: (346,9) for_read_seq
  -> EXTERN: (347,9) for_read_seq
  -> EXTERN: (348,14) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (350,5) for_read_seq
  -> EXTERN: (352,9) for_read_seq
  -> EXTERN: (353,9) for_read_seq
  -> EXTERN: (354,14) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (356,5) for_read_seq
  -> EXTERN: (358,9) for_read_seq
  -> EXTERN: (359,9) for_read_seq
  -> EXTERN: (360,14) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (362,5) for_read_seq
  -> EXTERN: (363,5) for_read_seq
  -> EXTERN: (365,9) for_read_seq
  -> EXTERN: (366,9) for_read_seq
  -> EXTERN: (367,14) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (371,10) KR_EXTERNS_OUT_MO_IMP_SOL
  -> EXTERN: (374,5) for_read_seq
  -> EXTERN: (376,9) for_read_seq
  -> EXTERN: (377,9) for_read_seq
  -> EXTERN: (378,14) KGEN_ARRAY_SUMCHECK
  -> INLINE: (387,10) MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR:KGEN_KERNEL (isz = 12) (sz = 15)
    -> EXTERN: (519,10) IMP_SOL
  -> EXTERN: (481,10) KGEN_INIT_CHECK
  -> (486,10) MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR:KV_GAS_PHASE_CHEMDR_REAL__R8_DIM3 (isz = 2071) (sz = 2084)
     [[ Inlining would exceed -inline-max-size value (2084>253) <1>]]
  -> EXTERN: (506,10) for_system_clock_rate
  -> EXTERN: (506,10) for_system_clock_count
  -> INLINE: (508,14) MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR:KGEN_KERNEL (isz = 12) (sz = 15)
    -> EXTERN: (519,10) IMP_SOL
  -> EXTERN: (510,10) for_system_clock_rate
  -> EXTERN: (510,10) for_system_clock_count
  -> EXTERN: (515,5) __resetsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mo_gas_phase_chemdr.F90(348,65)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_gas_phase_chemdr.F90(348,65)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at mo_gas_phase_chemdr.F90(348,65)
         remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_gas_phase_chemdr.F90(348,65) ]
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(348,65)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(354,62)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_gas_phase_chemdr.F90(354,62)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at mo_gas_phase_chemdr.F90(354,62)
         remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_gas_phase_chemdr.F90(354,62) ]
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(354,62)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(360,79)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_gas_phase_chemdr.F90(360,79)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_gas_phase_chemdr.F90(360,79) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at mo_gas_phase_chemdr.F90(360,79)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(367,74)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_gas_phase_chemdr.F90(367,74)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_gas_phase_chemdr.F90(367,74) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at mo_gas_phase_chemdr.F90(367,74)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(378,70)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_gas_phase_chemdr.F90(378,70)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at mo_gas_phase_chemdr.F90(378,70)
         remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_gas_phase_chemdr.F90(378,70) ]
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(378,70)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mo_gas_phase_chemdr.F90(74,12):remark #34051: REGISTER ALLOCATION : [mo_gas_phase_chemdr_mp_gas_phase_chemdr_] mo_gas_phase_chemdr.F90:74

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     416
            Global    :     104
            Local     :     312
        Regenerable   :     190
        Spilled       :       9
        
    Routine stack
        Variables     :     660 bytes*
            Reads     :      38 [2.72e+01 ~ 0.0%]
            Writes    :      82 [6.40e+01 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      17 [1.04e+01 ~ 0.0%]
            Writes    :      17 [1.04e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR:KGEN_KERNEL

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR:KGEN_KERNEL) mo_gas_phase_chemdr.F90(518,16)

===========================================================================

Begin optimization report for: MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR:KV_GAS_PHASE_CHEMDR_REAL__R8_DIM3

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_GAS_PHASE_CHEMDR::GAS_PHASE_CHEMDR:KV_GAS_PHASE_CHEMDR_REAL__R8_DIM3) [4/4=100.0%] mo_gas_phase_chemdr.F90(523,26)
  -> EXTERN: (544,13) for_alloc_allocatable
  -> EXTERN: (544,13) for_check_mult_overflow64
  -> EXTERN: (545,13) for_alloc_allocatable
  -> EXTERN: (545,13) for_check_mult_overflow64
  -> EXTERN: (547,13) _alloca
  -> EXTERN: (548,17) for_alloc_allocatable
  -> EXTERN: (548,17) for_dealloc_allocatable
  -> EXTERN: (549,17) for_alloc_allocatable
  -> EXTERN: (549,17) for_dealloc_allocatable
  -> EXTERN: (551,17) for_alloc_allocatable
  -> EXTERN: (551,17) for_dealloc_allocatable
  -> EXTERN: (552,17) for_alloc_allocatable
  -> EXTERN: (552,17) for_dealloc_allocatable
  -> EXTERN: (552,17) for_dealloc_allocatable
  -> EXTERN: (552,17) __resetsp_inlined
  -> EXTERN: (552,17) __getsp_inlined
  -> EXTERN: (599,5) for_dealloc_allocatable
  -> EXTERN: (599,5) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mo_gas_phase_chemdr.F90(537,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_gas_phase_chemdr.F90(537,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_gas_phase_chemdr.F90(537,13)
         remark #15305: vectorization support: vector length 16
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.841
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 1.370 
         remark #15478: estimated potential speedup: 7.540 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(537,13)
      <Remainder loop for vectorization>
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.020
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(546,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_gas_phase_chemdr.F90(546,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_gas_phase_chemdr.F90(546,17)
         remark #15305: vectorization support: vector length 16
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.167
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 1.120 
         remark #15478: estimated potential speedup: 10.650 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(546,17)
      <Remainder loop for vectorization>
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.792
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(547,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_gas_phase_chemdr.F90(547,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_gas_phase_chemdr.F90(547,13)
         remark #15389: vectorization support: reference var(var,var,var) has unaligned access   [ mo_gas_phase_chemdr.F90(547,38) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.400
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 17 
         remark #15477: vector loop cost: 1.250 
         remark #15478: estimated potential speedup: 12.500 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(547,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference var(var,var,var) has unaligned access   [ mo_gas_phase_chemdr.F90(547,38) ]
         remark #15389: vectorization support: reference var(var,var,var) has unaligned access   [ mo_gas_phase_chemdr.F90(547,38) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.647
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(548,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_gas_phase_chemdr.F90(548,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_gas_phase_chemdr.F90(548,17)
         remark #15389: vectorization support: reference *var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access   [ mo_gas_phase_chemdr.F90(548,29) ]
         remark #15389: vectorization support: reference BUF1(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.266
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 3 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 27 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 3.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(548,17)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access   [ mo_gas_phase_chemdr.F90(548,29) ]
         remark #15389: vectorization support: reference BUF1(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.382
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(549,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_gas_phase_chemdr.F90(549,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_gas_phase_chemdr.F90(549,17)
         remark #15389: vectorization support: reference *var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference BUF2(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 32
         remark #15309: vectorization support: normalized vectorization overhead 0.159
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 2 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 15 
         remark #15477: vector loop cost: 2.750 
         remark #15478: estimated potential speedup: 4.580 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(549,17)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference BUF2(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.634
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(551,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_gas_phase_chemdr.F90(551,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_gas_phase_chemdr.F90(551,17)
         remark #15389: vectorization support: reference *var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference BUF1(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 32
         remark #15309: vectorization support: normalized vectorization overhead 0.159
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 2 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 16 
         remark #15477: vector loop cost: 2.750 
         remark #15478: estimated potential speedup: 4.880 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(551,17)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference *kgenref_var(var,var,var) has unaligned access
         remark #15389: vectorization support: reference BUF1(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.634
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(552,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_gas_phase_chemdr.F90(552,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_gas_phase_chemdr.F90(552,17)
         remark #15389: vectorization support: reference BUF2(var,var,var) has unaligned access
         remark #15389: vectorization support: reference BUF1(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 32
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 1 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 1.370 
         remark #15478: estimated potential speedup: 7.910 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(552,17)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference BUF2(var,var,var) has unaligned access
         remark #15389: vectorization support: reference BUF1(var,var,var) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.575
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_gas_phase_chemdr.F90(554,29)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_gas_phase_chemdr.F90(554,29)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at mo_gas_phase_chemdr.F90(554,29)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at mo_gas_phase_chemdr.F90(554,29)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mo_gas_phase_chemdr.F90(533,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
mo_gas_phase_chemdr.F90(533,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
mo_gas_phase_chemdr.F90(552,17):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
mo_gas_phase_chemdr.F90(523,26):remark #34051: REGISTER ALLOCATION : [mo_gas_phase_chemdrgas_phase_chemdr_mp_kv_gas_phase_chemdr_real__r8_dim3_] mo_gas_phase_chemdr.F90:523

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm25 k0-k7]
        
    Routine temporaries
        Total         :     974
            Global    :     327
            Local     :     647
        Regenerable   :      46
        Spilled       :     129
        
    Routine stack
        Variables     :     256 bytes*
            Reads     :      79 [1.38e+01 ~ 0.1%]
            Writes    :      97 [4.60e+01 ~ 0.2%]
        Spills        :    1056 bytes*
            Reads     :     266 [1.17e+03 ~ 4.3%]
            Writes    :     187 [2.38e+02 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

