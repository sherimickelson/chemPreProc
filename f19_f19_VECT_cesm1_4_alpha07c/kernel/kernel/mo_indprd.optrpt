Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.042 Beta Build 20160315

Compiler options: -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -qopt-report=5 -no-opt-dynamic-align -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source -debug minimal -openmp -free -xMIC-AVX512 -c -o mo_indprd.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: mo_indprd._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mo_indprd._) [1/2=50.0%] mo_indprd.F90(11,14)


    Report from: Code generation optimizations [cg]

mo_indprd.F90(11,14):remark #34051: REGISTER ALLOCATION : [mo_indprd._] mo_indprd.F90:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MO_INDPRD::INDPRD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_INDPRD::INDPRD) [2/2=100.0%] mo_indprd.F90(22,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mo_indprd.F90(41,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(41,10)
      remark #15389: vectorization support: reference prod(var,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(41,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(43,10)
   remark #15389: vectorization support: reference prod(var,2) has unaligned access
   remark #15389: vectorization support: reference rxt(var,311) has unaligned access
   remark #15389: vectorization support: reference y(var,59) has unaligned access   [ mo_indprd.F90(43,28) ]
   remark #15389: vectorization support: reference y(var,1) has unaligned access   [ mo_indprd.F90(43,39) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.522
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.430 
   remark #15478: estimated potential speedup: 6.990 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(43,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,2) has unaligned access
   remark #15389: vectorization support: reference rxt(var,311) has unaligned access
   remark #15389: vectorization support: reference y(var,59) has unaligned access   [ mo_indprd.F90(43,28) ]
   remark #15389: vectorization support: reference y(var,1) has unaligned access   [ mo_indprd.F90(43,39) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.923
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(45,10)
   remark #15389: vectorization support: reference prod(var,3) has unaligned access
   remark #15389: vectorization support: reference rxt(var,184) has unaligned access
   remark #15389: vectorization support: reference y(var,10) has unaligned access
   remark #15389: vectorization support: reference y(var,8) has unaligned access   [ mo_indprd.F90(45,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.632
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 1.180 
   remark #15478: estimated potential speedup: 6.880 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(45,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,3) has unaligned access
   remark #15389: vectorization support: reference rxt(var,184) has unaligned access
   remark #15389: vectorization support: reference y(var,10) has unaligned access
   remark #15389: vectorization support: reference y(var,8) has unaligned access   [ mo_indprd.F90(45,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.043
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(47,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(47,10)
      remark #15389: vectorization support: reference prod(var,4) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(47,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,4) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(49,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(49,10)
      remark #15389: vectorization support: reference prod(var,5) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(49,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,5) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(51,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(51,10)
      remark #15389: vectorization support: reference prod(var,6) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(51,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,6) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(53,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(53,10)
      remark #15389: vectorization support: reference prod(var,7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(53,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(55,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(55,10)
      remark #15389: vectorization support: reference prod(var,8) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(55,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,8) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(57,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(57,10)
      remark #15389: vectorization support: reference prod(var,9) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(57,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,9) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(59,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(59,10)
      remark #15389: vectorization support: reference prod(var,10) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(59,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,10) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(61,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(61,10)
      remark #15389: vectorization support: reference prod(var,11) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(61,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,11) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(63,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(63,10)
      remark #15389: vectorization support: reference prod(var,12) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(63,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,12) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(65,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(65,10)
      remark #15389: vectorization support: reference prod(var,13) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(65,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,13) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(67,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(67,10)
      remark #15389: vectorization support: reference prod(var,14) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(67,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,14) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(69,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(69,10)
      remark #15389: vectorization support: reference prod(var,15) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(69,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,15) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(71,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(71,10)
      remark #15389: vectorization support: reference prod(var,16) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(71,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,16) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(73,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(73,10)
      remark #15389: vectorization support: reference prod(var,17) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(73,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,17) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(75,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(75,10)
      remark #15389: vectorization support: reference prod(var,18) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(75,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,18) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(77,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(77,10)
      remark #15389: vectorization support: reference prod(var,19) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(77,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,19) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(79,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(79,10)
      remark #15389: vectorization support: reference prod(var,20) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(79,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,20) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(81,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(81,10)
      remark #15389: vectorization support: reference prod(var,21) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(81,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,21) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(83,10)
   remark #15389: vectorization support: reference prod(var,22) has unaligned access
   remark #15389: vectorization support: reference rxt(var,264) has unaligned access
   remark #15389: vectorization support: reference y(var,20) has unaligned access
   remark #15389: vectorization support: reference rxt(var,265) has unaligned access   [ mo_indprd.F90(83,34) ]
   remark #15389: vectorization support: reference y(var,20) has unaligned access   [ mo_indprd.F90(83,34) ]
   remark #15389: vectorization support: reference rxt(var,276) has unaligned access   [ mo_indprd.F90(83,43) ]
   remark #15389: vectorization support: reference y(var,136) has unaligned access   [ mo_indprd.F90(83,43) ]
   remark #15389: vectorization support: reference rxt(var,291) has unaligned access   [ mo_indprd.F90(83,63) ]
   remark #15389: vectorization support: reference y(var,49) has unaligned access   [ mo_indprd.F90(83,63) ]
   remark #15389: vectorization support: reference rxt(var,304) has unaligned access   [ mo_indprd.F90(83,84) ]
   remark #15389: vectorization support: reference y(var,54) has unaligned access   [ mo_indprd.F90(84,45) ]
   remark #15389: vectorization support: reference rxt(var,305) has unaligned access   [ mo_indprd.F90(84,37) ]
   remark #15389: vectorization support: reference y(var,52) has unaligned access   [ mo_indprd.F90(85,25) ]
   remark #15389: vectorization support: reference rxt(var,306) has unaligned access   [ mo_indprd.F90(84,65) ]
   remark #15389: vectorization support: reference y(var,53) has unaligned access   [ mo_indprd.F90(84,65) ]
   remark #15389: vectorization support: reference rxt(var,355) has unaligned access   [ mo_indprd.F90(85,45) ]
   remark #15389: vectorization support: reference y(var,81) has unaligned access   [ mo_indprd.F90(86,25) ]
   remark #15389: vectorization support: reference y(var,23) has unaligned access   [ mo_indprd.F90(85,65) ]
   remark #15389: vectorization support: reference rxt(var,299) has unaligned access   [ mo_indprd.F90(86,45) ]
   remark #15389: vectorization support: reference y(var,9) has unaligned access   [ mo_indprd.F90(86,45) ]
   remark #15389: vectorization support: reference rxt(var,302) has unaligned access   [ mo_indprd.F90(86,67) ]
   remark #15389: vectorization support: reference y(var,16) has unaligned access   [ mo_indprd.F90(87,25) ]
   remark #15389: vectorization support: reference rxt(var,303) has unaligned access   [ mo_indprd.F90(86,75) ]
   remark #15389: vectorization support: reference y(var,48) has unaligned access   [ mo_indprd.F90(87,54) ]
   remark #15389: vectorization support: reference rxt(var,351) has unaligned access   [ mo_indprd.F90(87,45) ]
   remark #15389: vectorization support: reference y(var,76) has unaligned access   [ mo_indprd.F90(88,26) ]
   remark #15389: vectorization support: reference rxt(var,379) has unaligned access   [ mo_indprd.F90(87,74) ]
   remark #15389: vectorization support: reference y(var,91) has unaligned access   [ mo_indprd.F90(87,74) ]
   remark #15389: vectorization support: reference y(var,48) has unaligned access   [ mo_indprd.F90(88,46) ]
   remark #15389: vectorization support: reference rxt(var,350) has unaligned access   [ mo_indprd.F90(86,54) ]
   remark #15389: vectorization support: reference y(var,16) has unaligned access   [ mo_indprd.F90(86,54) ]
   remark #15389: vectorization support: reference rxt(var,352) has unaligned access   [ mo_indprd.F90(89,32) ]
   remark #15389: vectorization support: reference y(var,76) has unaligned access   [ mo_indprd.F90(89,50) ]
   remark #15389: vectorization support: reference y(var,76) has unaligned access   [ mo_indprd.F90(89,41) ]
   remark #15389: vectorization support: reference rxt(var,63) has unaligned access   [ mo_indprd.F90(89,19) ]
   remark #15389: vectorization support: reference y(var,54) has unaligned access   [ mo_indprd.F90(89,19) ]
   remark #15389: vectorization support: reference rxt(var,64) has unaligned access   [ mo_indprd.F90(90,19) ]
   remark #15389: vectorization support: reference y(var,58) has unaligned access   [ mo_indprd.F90(90,46) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.493
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 35 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 113 
   remark #15477: vector loop cost: 13.680 
   remark #15478: estimated potential speedup: 7.550 
   remark #15488: --- end vector loop cost summary ---
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 12
LOOP END

LOOP BEGIN at mo_indprd.F90(83,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,22) has unaligned access
   remark #15389: vectorization support: reference rxt(var,264) has unaligned access
   remark #15389: vectorization support: reference y(var,20) has unaligned access
   remark #15389: vectorization support: reference rxt(var,265) has unaligned access   [ mo_indprd.F90(83,34) ]
   remark #15389: vectorization support: reference y(var,20) has unaligned access   [ mo_indprd.F90(83,34) ]
   remark #15389: vectorization support: reference rxt(var,276) has unaligned access   [ mo_indprd.F90(83,43) ]
   remark #15389: vectorization support: reference y(var,136) has unaligned access   [ mo_indprd.F90(83,43) ]
   remark #15389: vectorization support: reference rxt(var,291) has unaligned access   [ mo_indprd.F90(83,63) ]
   remark #15389: vectorization support: reference y(var,49) has unaligned access   [ mo_indprd.F90(83,63) ]
   remark #15389: vectorization support: reference rxt(var,304) has unaligned access   [ mo_indprd.F90(83,84) ]
   remark #15389: vectorization support: reference y(var,54) has unaligned access   [ mo_indprd.F90(84,45) ]
   remark #15389: vectorization support: reference rxt(var,305) has unaligned access   [ mo_indprd.F90(84,37) ]
   remark #15389: vectorization support: reference y(var,52) has unaligned access   [ mo_indprd.F90(85,25) ]
   remark #15389: vectorization support: reference rxt(var,306) has unaligned access   [ mo_indprd.F90(84,65) ]
   remark #15389: vectorization support: reference y(var,53) has unaligned access   [ mo_indprd.F90(84,65) ]
   remark #15389: vectorization support: reference rxt(var,355) has unaligned access   [ mo_indprd.F90(85,45) ]
   remark #15389: vectorization support: reference y(var,81) has unaligned access   [ mo_indprd.F90(86,25) ]
   remark #15389: vectorization support: reference y(var,23) has unaligned access   [ mo_indprd.F90(85,65) ]
   remark #15389: vectorization support: reference rxt(var,299) has unaligned access   [ mo_indprd.F90(86,45) ]
   remark #15389: vectorization support: reference y(var,9) has unaligned access   [ mo_indprd.F90(86,45) ]
   remark #15389: vectorization support: reference rxt(var,302) has unaligned access   [ mo_indprd.F90(86,67) ]
   remark #15389: vectorization support: reference y(var,16) has unaligned access   [ mo_indprd.F90(87,25) ]
   remark #15389: vectorization support: reference rxt(var,303) has unaligned access   [ mo_indprd.F90(86,75) ]
   remark #15389: vectorization support: reference y(var,48) has unaligned access   [ mo_indprd.F90(87,54) ]
   remark #15389: vectorization support: reference rxt(var,351) has unaligned access   [ mo_indprd.F90(87,45) ]
   remark #15389: vectorization support: reference y(var,76) has unaligned access   [ mo_indprd.F90(88,26) ]
   remark #15389: vectorization support: reference rxt(var,379) has unaligned access   [ mo_indprd.F90(87,74) ]
   remark #15389: vectorization support: reference y(var,91) has unaligned access   [ mo_indprd.F90(87,74) ]
   remark #15389: vectorization support: reference y(var,48) has unaligned access   [ mo_indprd.F90(88,46) ]
   remark #15389: vectorization support: reference rxt(var,350) has unaligned access   [ mo_indprd.F90(86,54) ]
   remark #15389: vectorization support: reference y(var,16) has unaligned access   [ mo_indprd.F90(86,54) ]
   remark #15389: vectorization support: reference rxt(var,352) has unaligned access   [ mo_indprd.F90(89,32) ]
   remark #15389: vectorization support: reference y(var,76) has unaligned access   [ mo_indprd.F90(89,50) ]
   remark #15389: vectorization support: reference y(var,76) has unaligned access   [ mo_indprd.F90(89,41) ]
   remark #15389: vectorization support: reference rxt(var,63) has unaligned access   [ mo_indprd.F90(89,19) ]
   remark #15389: vectorization support: reference y(var,54) has unaligned access   [ mo_indprd.F90(89,19) ]
   remark #15389: vectorization support: reference rxt(var,64) has unaligned access   [ mo_indprd.F90(90,19) ]
   remark #15389: vectorization support: reference y(var,58) has unaligned access   [ mo_indprd.F90(90,46) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.581
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(92,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(92,10)
      remark #15389: vectorization support: reference prod(var,23) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(92,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,23) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(94,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(94,10)
      remark #15389: vectorization support: reference prod(var,24) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(94,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,24) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(96,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(96,10)
      remark #15389: vectorization support: reference prod(var,25) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(96,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,25) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(98,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(98,10)
      remark #15389: vectorization support: reference prod(var,26) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(98,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,26) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(100,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(100,10)
      remark #15389: vectorization support: reference prod(var,27) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(100,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,27) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(102,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(102,10)
      remark #15389: vectorization support: reference prod(var,28) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(102,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,28) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(104,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(104,10)
      remark #15389: vectorization support: reference prod(var,29) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(104,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,29) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(106,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(106,10)
      remark #15389: vectorization support: reference prod(var,30) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(106,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,30) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(108,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(108,10)
      remark #15389: vectorization support: reference prod(var,31) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,15) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(108,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,31) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,15) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(110,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(110,10)
      remark #15389: vectorization support: reference prod(var,32) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(110,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,32) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(112,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(112,10)
      remark #15389: vectorization support: reference prod(var,33) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(112,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,33) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(114,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(114,10)
      remark #15389: vectorization support: reference prod(var,34) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(114,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,34) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(116,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(116,10)
      remark #15389: vectorization support: reference prod(var,35) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(116,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,35) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(118,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(118,10)
      remark #15389: vectorization support: reference prod(var,36) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(118,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,36) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(120,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(120,10)
      remark #15389: vectorization support: reference prod(var,37) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(120,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,37) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(126,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(126,10)
      remark #15389: vectorization support: reference prod(var,139) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(126,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,139) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(128,10)
   remark #15389: vectorization support: reference prod(var,146) has unaligned access
   remark #15389: vectorization support: reference rxt(var,58) has unaligned access
   remark #15389: vectorization support: reference rxt(var,114) has unaligned access
   remark #15389: vectorization support: reference y(var,126) has unaligned access   [ mo_indprd.F90(128,35) ]
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access   [ mo_indprd.F90(128,47) ]
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(128,65) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.545
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 2.060 
   remark #15478: estimated potential speedup: 7.070 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(128,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,146) has unaligned access
   remark #15389: vectorization support: reference rxt(var,58) has unaligned access
   remark #15389: vectorization support: reference rxt(var,114) has unaligned access
   remark #15389: vectorization support: reference y(var,126) has unaligned access   [ mo_indprd.F90(128,35) ]
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access   [ mo_indprd.F90(128,47) ]
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(128,65) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(130,10)
   remark #15389: vectorization support: reference prod(var,143) has unaligned access
   remark #15389: vectorization support: reference rxt(var,5) has unaligned access
   remark #15389: vectorization support: reference y(var,7) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.643
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 0.870 
   remark #15478: estimated potential speedup: 6.220 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(130,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,143) has unaligned access
   remark #15389: vectorization support: reference rxt(var,5) has unaligned access
   remark #15389: vectorization support: reference y(var,7) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(132,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(132,10)
      remark #15389: vectorization support: reference prod(var,129) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(132,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,129) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(134,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(134,10)
      remark #15389: vectorization support: reference prod(var,43) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(134,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,43) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(136,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(136,10)
      remark #15389: vectorization support: reference prod(var,42) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(136,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,42) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(138,10)
   remark #15389: vectorization support: reference prod(var,120) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(138,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.120 
   remark #15478: estimated potential speedup: 6.500 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(138,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,120) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(138,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(140,10)
   remark #15389: vectorization support: reference prod(var,115) has unaligned access
   remark #15389: vectorization support: reference rxt(var,58) has unaligned access
   remark #15389: vectorization support: reference rxt(var,114) has unaligned access
   remark #15389: vectorization support: reference y(var,126) has unaligned access   [ mo_indprd.F90(140,35) ]
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access   [ mo_indprd.F90(140,47) ]
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(140,65) ]
   remark #15389: vectorization support: reference extfrc(var,3) has unaligned access   [ mo_indprd.F90(140,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.553
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 6 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 2.370 
   remark #15478: estimated potential speedup: 7.290 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(140,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,115) has unaligned access
   remark #15389: vectorization support: reference rxt(var,58) has unaligned access
   remark #15389: vectorization support: reference rxt(var,114) has unaligned access
   remark #15389: vectorization support: reference y(var,126) has unaligned access   [ mo_indprd.F90(140,35) ]
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access   [ mo_indprd.F90(140,47) ]
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(140,65) ]
   remark #15389: vectorization support: reference extfrc(var,3) has unaligned access   [ mo_indprd.F90(140,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.805
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(143,10)
   remark #15389: vectorization support: reference prod(var,105) has unaligned access
   remark #15389: vectorization support: reference rxt(var,98) has unaligned access
   remark #15389: vectorization support: reference rxt(var,101) has unaligned access
   remark #15389: vectorization support: reference rxt(var,110) has unaligned access   [ mo_indprd.F90(143,35) ]
   remark #15389: vectorization support: reference rxt(var,113) has unaligned access   [ mo_indprd.F90(143,55) ]
   remark #15389: vectorization support: reference extfrc(var,12) has unaligned access   [ mo_indprd.F90(143,67) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.486
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 2.310 
   remark #15478: estimated potential speedup: 7.120 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(143,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,105) has unaligned access
   remark #15389: vectorization support: reference rxt(var,98) has unaligned access
   remark #15389: vectorization support: reference rxt(var,101) has unaligned access
   remark #15389: vectorization support: reference rxt(var,110) has unaligned access   [ mo_indprd.F90(143,35) ]
   remark #15389: vectorization support: reference rxt(var,113) has unaligned access   [ mo_indprd.F90(143,55) ]
   remark #15389: vectorization support: reference extfrc(var,12) has unaligned access   [ mo_indprd.F90(143,67) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.769
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(146,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(146,10)
      remark #15389: vectorization support: reference prod(var,134) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(146,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,134) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(148,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(148,10)
      remark #15389: vectorization support: reference prod(var,144) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,2) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(148,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,144) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,2) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(150,10)
   remark #15389: vectorization support: reference prod(var,138) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(150,30) ]
   remark #15389: vectorization support: reference extfrc(var,14) has unaligned access   [ mo_indprd.F90(150,40) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.522
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.430 
   remark #15478: estimated potential speedup: 6.990 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(150,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,138) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(150,30) ]
   remark #15389: vectorization support: reference extfrc(var,14) has unaligned access   [ mo_indprd.F90(150,40) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.923
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(152,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(152,10)
      remark #15389: vectorization support: reference prod(var,135) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(152,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,135) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(154,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(154,10)
      remark #15389: vectorization support: reference prod(var,131) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(154,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,131) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(156,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(156,10)
      remark #15389: vectorization support: reference prod(var,73) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(156,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,73) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(158,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(158,10)
      remark #15389: vectorization support: reference prod(var,55) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(158,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,55) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(160,10)
   remark #15389: vectorization support: reference prod(var,136) has unaligned access
   remark #15389: vectorization support: reference rxt(var,59) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access
   remark #15389: vectorization support: reference rxt(var,37) has unaligned access   [ mo_indprd.F90(160,32) ]
   remark #15389: vectorization support: reference y(var,108) has unaligned access   [ mo_indprd.F90(160,32) ]
   remark #15389: vectorization support: reference rxt(var,48) has unaligned access   [ mo_indprd.F90(160,41) ]
   remark #15389: vectorization support: reference y(var,109) has unaligned access   [ mo_indprd.F90(160,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.618
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 6 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 2.120 
   remark #15478: estimated potential speedup: 7.270 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(160,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,136) has unaligned access
   remark #15389: vectorization support: reference rxt(var,59) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access
   remark #15389: vectorization support: reference rxt(var,37) has unaligned access   [ mo_indprd.F90(160,32) ]
   remark #15389: vectorization support: reference y(var,108) has unaligned access   [ mo_indprd.F90(160,32) ]
   remark #15389: vectorization support: reference rxt(var,48) has unaligned access   [ mo_indprd.F90(160,41) ]
   remark #15389: vectorization support: reference y(var,109) has unaligned access   [ mo_indprd.F90(160,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.868
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(162,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(162,10)
      remark #15389: vectorization support: reference prod(var,67) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(162,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,67) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(164,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(164,10)
      remark #15389: vectorization support: reference prod(var,47) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(164,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,47) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(166,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(166,10)
      remark #15389: vectorization support: reference prod(var,34) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(166,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,34) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(168,10)
   remark #15389: vectorization support: reference prod(var,140) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(168,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.120 
   remark #15478: estimated potential speedup: 6.500 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(168,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,140) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(168,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(170,10)
   remark #15389: vectorization support: reference prod(var,141) has unaligned access
   remark #15389: vectorization support: reference rxt(var,59) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(170,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.522
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.430 
   remark #15478: estimated potential speedup: 6.990 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(170,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,141) has unaligned access
   remark #15389: vectorization support: reference rxt(var,59) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(170,35) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.923
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(172,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(172,10)
      remark #15389: vectorization support: reference prod(var,142) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(172,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,142) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(174,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(174,10)
      remark #15389: vectorization support: reference prod(var,89) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(174,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,89) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(176,10)
   remark #15389: vectorization support: reference prod(var,130) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(176,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.120 
   remark #15478: estimated potential speedup: 6.500 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(176,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,130) has unaligned access
   remark #15389: vectorization support: reference rxt(var,60) has unaligned access
   remark #15389: vectorization support: reference y(var,15) has unaligned access   [ mo_indprd.F90(176,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(178,10)
   remark #15389: vectorization support: reference prod(var,145) has unaligned access
   remark #15389: vectorization support: reference rxt(var,37) has unaligned access
   remark #15389: vectorization support: reference y(var,108) has unaligned access
   remark #15389: vectorization support: reference rxt(var,40) has unaligned access   [ mo_indprd.F90(178,32) ]
   remark #15389: vectorization support: reference y(var,110) has unaligned access   [ mo_indprd.F90(178,51) ]
   remark #15389: vectorization support: reference rxt(var,41) has unaligned access   [ mo_indprd.F90(178,42) ]
   remark #15389: vectorization support: reference y(var,111) has unaligned access   [ mo_indprd.F90(179,28) ]
   remark #15389: vectorization support: reference rxt(var,42) has unaligned access   [ mo_indprd.F90(179,19) ]
   remark #15389: vectorization support: reference y(var,112) has unaligned access   [ mo_indprd.F90(179,57) ]
   remark #15389: vectorization support: reference rxt(var,45) has unaligned access   [ mo_indprd.F90(179,48) ]
   remark #15389: vectorization support: reference y(var,113) has unaligned access   [ mo_indprd.F90(179,48) ]
   remark #15389: vectorization support: reference rxt(var,38) has unaligned access   [ mo_indprd.F90(179,77) ]
   remark #15389: vectorization support: reference y(var,114) has unaligned access   [ mo_indprd.F90(180,37) ]
   remark #15389: vectorization support: reference rxt(var,39) has unaligned access   [ mo_indprd.F90(180,28) ]
   remark #15389: vectorization support: reference y(var,115) has unaligned access   [ mo_indprd.F90(180,66) ]
   remark #15389: vectorization support: reference rxt(var,50) has unaligned access   [ mo_indprd.F90(180,57) ]
   remark #15389: vectorization support: reference y(var,117) has unaligned access   [ mo_indprd.F90(180,57) ]
   remark #15389: vectorization support: reference rxt(var,46) has unaligned access   [ mo_indprd.F90(181,19) ]
   remark #15389: vectorization support: reference y(var,118) has unaligned access   [ mo_indprd.F90(181,19) ]
   remark #15389: vectorization support: reference rxt(var,47) has unaligned access   [ mo_indprd.F90(181,39) ]
   remark #15389: vectorization support: reference y(var,119) has unaligned access   [ mo_indprd.F90(181,39) ]
   remark #15389: vectorization support: reference rxt(var,43) has unaligned access   [ mo_indprd.F90(181,59) ]
   remark #15389: vectorization support: reference y(var,120) has unaligned access   [ mo_indprd.F90(182,28) ]
   remark #15389: vectorization support: reference rxt(var,44) has unaligned access   [ mo_indprd.F90(182,19) ]
   remark #15389: vectorization support: reference y(var,121) has unaligned access   [ mo_indprd.F90(182,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.507
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 24 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 76 
   remark #15477: vector loop cost: 9.250 
   remark #15478: estimated potential speedup: 7.510 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(178,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,145) has unaligned access
   remark #15389: vectorization support: reference rxt(var,37) has unaligned access
   remark #15389: vectorization support: reference y(var,108) has unaligned access
   remark #15389: vectorization support: reference rxt(var,40) has unaligned access   [ mo_indprd.F90(178,32) ]
   remark #15389: vectorization support: reference y(var,110) has unaligned access   [ mo_indprd.F90(178,51) ]
   remark #15389: vectorization support: reference rxt(var,41) has unaligned access   [ mo_indprd.F90(178,42) ]
   remark #15389: vectorization support: reference y(var,111) has unaligned access   [ mo_indprd.F90(179,28) ]
   remark #15389: vectorization support: reference rxt(var,42) has unaligned access   [ mo_indprd.F90(179,19) ]
   remark #15389: vectorization support: reference y(var,112) has unaligned access   [ mo_indprd.F90(179,57) ]
   remark #15389: vectorization support: reference rxt(var,45) has unaligned access   [ mo_indprd.F90(179,48) ]
   remark #15389: vectorization support: reference y(var,113) has unaligned access   [ mo_indprd.F90(179,48) ]
   remark #15389: vectorization support: reference rxt(var,38) has unaligned access   [ mo_indprd.F90(179,77) ]
   remark #15389: vectorization support: reference y(var,114) has unaligned access   [ mo_indprd.F90(180,37) ]
   remark #15389: vectorization support: reference rxt(var,39) has unaligned access   [ mo_indprd.F90(180,28) ]
   remark #15389: vectorization support: reference y(var,115) has unaligned access   [ mo_indprd.F90(180,66) ]
   remark #15389: vectorization support: reference rxt(var,50) has unaligned access   [ mo_indprd.F90(180,57) ]
   remark #15389: vectorization support: reference y(var,117) has unaligned access   [ mo_indprd.F90(180,57) ]
   remark #15389: vectorization support: reference rxt(var,46) has unaligned access   [ mo_indprd.F90(181,19) ]
   remark #15389: vectorization support: reference y(var,118) has unaligned access   [ mo_indprd.F90(181,19) ]
   remark #15389: vectorization support: reference rxt(var,47) has unaligned access   [ mo_indprd.F90(181,39) ]
   remark #15389: vectorization support: reference y(var,119) has unaligned access   [ mo_indprd.F90(181,39) ]
   remark #15389: vectorization support: reference rxt(var,43) has unaligned access   [ mo_indprd.F90(181,59) ]
   remark #15389: vectorization support: reference y(var,120) has unaligned access   [ mo_indprd.F90(182,28) ]
   remark #15389: vectorization support: reference rxt(var,44) has unaligned access   [ mo_indprd.F90(182,19) ]
   remark #15389: vectorization support: reference y(var,121) has unaligned access   [ mo_indprd.F90(182,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.596
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(184,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(184,10)
      remark #15389: vectorization support: reference prod(var,44) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(184,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,44) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(186,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(186,10)
      remark #15389: vectorization support: reference prod(var,132) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(186,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,132) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(188,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(188,10)
      remark #15389: vectorization support: reference prod(var,37) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(188,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,37) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(190,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(190,10)
      remark #15389: vectorization support: reference prod(var,28) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(190,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,28) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(192,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(192,10)
      remark #15389: vectorization support: reference prod(var,137) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(192,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,137) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(194,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(194,10)
      remark #15389: vectorization support: reference prod(var,107) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(194,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,107) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(196,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(196,10)
      remark #15389: vectorization support: reference prod(var,113) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(196,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,113) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(198,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(198,10)
      remark #15389: vectorization support: reference prod(var,50) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(198,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,50) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(200,10)
   remark #15389: vectorization support: reference prod(var,133) has unaligned access
   remark #15389: vectorization support: reference rxt(var,48) has unaligned access
   remark #15389: vectorization support: reference y(var,109) has unaligned access
   remark #15389: vectorization support: reference rxt(var,49) has unaligned access   [ mo_indprd.F90(200,32) ]
   remark #15389: vectorization support: reference y(var,116) has unaligned access   [ mo_indprd.F90(200,32) ]
   remark #15389: vectorization support: reference rxt(var,50) has unaligned access   [ mo_indprd.F90(200,42) ]
   remark #15389: vectorization support: reference y(var,117) has unaligned access   [ mo_indprd.F90(200,42) ]
   remark #15389: vectorization support: reference rxt(var,53) has unaligned access   [ mo_indprd.F90(200,62) ]
   remark #15389: vectorization support: reference y(var,122) has unaligned access   [ mo_indprd.F90(201,28) ]
   remark #15389: vectorization support: reference rxt(var,54) has unaligned access   [ mo_indprd.F90(201,19) ]
   remark #15389: vectorization support: reference y(var,123) has unaligned access   [ mo_indprd.F90(201,57) ]
   remark #15389: vectorization support: reference rxt(var,51) has unaligned access   [ mo_indprd.F90(201,48) ]
   remark #15389: vectorization support: reference y(var,124) has unaligned access   [ mo_indprd.F90(202,28) ]
   remark #15389: vectorization support: reference rxt(var,52) has unaligned access   [ mo_indprd.F90(202,19) ]
   remark #15389: vectorization support: reference y(var,125) has unaligned access   [ mo_indprd.F90(202,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 14 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 46 
   remark #15477: vector loop cost: 5.620 
   remark #15478: estimated potential speedup: 7.470 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(200,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,133) has unaligned access
   remark #15389: vectorization support: reference rxt(var,48) has unaligned access
   remark #15389: vectorization support: reference y(var,109) has unaligned access
   remark #15389: vectorization support: reference rxt(var,49) has unaligned access   [ mo_indprd.F90(200,32) ]
   remark #15389: vectorization support: reference y(var,116) has unaligned access   [ mo_indprd.F90(200,32) ]
   remark #15389: vectorization support: reference rxt(var,50) has unaligned access   [ mo_indprd.F90(200,42) ]
   remark #15389: vectorization support: reference y(var,117) has unaligned access   [ mo_indprd.F90(200,42) ]
   remark #15389: vectorization support: reference rxt(var,53) has unaligned access   [ mo_indprd.F90(200,62) ]
   remark #15389: vectorization support: reference y(var,122) has unaligned access   [ mo_indprd.F90(201,28) ]
   remark #15389: vectorization support: reference rxt(var,54) has unaligned access   [ mo_indprd.F90(201,19) ]
   remark #15389: vectorization support: reference y(var,123) has unaligned access   [ mo_indprd.F90(201,57) ]
   remark #15389: vectorization support: reference rxt(var,51) has unaligned access   [ mo_indprd.F90(201,48) ]
   remark #15389: vectorization support: reference y(var,124) has unaligned access   [ mo_indprd.F90(202,28) ]
   remark #15389: vectorization support: reference rxt(var,52) has unaligned access   [ mo_indprd.F90(202,19) ]
   remark #15389: vectorization support: reference y(var,125) has unaligned access   [ mo_indprd.F90(202,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.633
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(204,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(204,10)
      remark #15389: vectorization support: reference prod(var,128) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(204,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,128) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(206,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(206,10)
      remark #15389: vectorization support: reference prod(var,104) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(206,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,104) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(208,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(208,10)
      remark #15389: vectorization support: reference prod(var,96) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(208,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,96) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(210,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(210,10)
      remark #15389: vectorization support: reference prod(var,80) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(210,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,80) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(212,10)
   remark #15389: vectorization support: reference prod(var,92) has unaligned access
   remark #15389: vectorization support: reference rxt(var,94) has unaligned access
   remark #15389: vectorization support: reference rxt(var,106) has unaligned access
   remark #15389: vectorization support: reference extfrc(var,10) has unaligned access   [ mo_indprd.F90(212,34) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.632
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 1.180 
   remark #15478: estimated potential speedup: 6.880 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(212,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,92) has unaligned access
   remark #15389: vectorization support: reference rxt(var,94) has unaligned access
   remark #15389: vectorization support: reference rxt(var,106) has unaligned access
   remark #15389: vectorization support: reference extfrc(var,10) has unaligned access   [ mo_indprd.F90(212,34) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.043
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(214,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(214,10)
      remark #15389: vectorization support: reference prod(var,98) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,8) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(214,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,98) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,8) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(216,10)
   remark #15389: vectorization support: reference prod(var,72) has unaligned access
   remark #15389: vectorization support: reference rxt(var,98) has unaligned access
   remark #15389: vectorization support: reference rxt(var,99) has unaligned access
   remark #15389: vectorization support: reference rxt(var,110) has unaligned access   [ mo_indprd.F90(216,34) ]
   remark #15389: vectorization support: reference rxt(var,111) has unaligned access   [ mo_indprd.F90(216,45) ]
   remark #15389: vectorization support: reference extfrc(var,9) has unaligned access   [ mo_indprd.F90(216,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.621
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 1.810 
   remark #15478: estimated potential speedup: 7.020 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(216,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,72) has unaligned access
   remark #15389: vectorization support: reference rxt(var,98) has unaligned access
   remark #15389: vectorization support: reference rxt(var,99) has unaligned access
   remark #15389: vectorization support: reference rxt(var,110) has unaligned access   [ mo_indprd.F90(216,34) ]
   remark #15389: vectorization support: reference rxt(var,111) has unaligned access   [ mo_indprd.F90(216,45) ]
   remark #15389: vectorization support: reference extfrc(var,9) has unaligned access   [ mo_indprd.F90(216,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(218,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(218,10)
      remark #15389: vectorization support: reference prod(var,88) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(218,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,88) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(220,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(220,10)
      remark #15389: vectorization support: reference prod(var,99) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(220,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,99) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(222,10)
   remark #15389: vectorization support: reference prod(var,76) has unaligned access
   remark #15389: vectorization support: reference rxt(var,99) has unaligned access
   remark #15389: vectorization support: reference rxt(var,101) has unaligned access
   remark #15389: vectorization support: reference rxt(var,111) has unaligned access   [ mo_indprd.F90(222,34) ]
   remark #15389: vectorization support: reference rxt(var,113) has unaligned access   [ mo_indprd.F90(222,55) ]
   remark #15389: vectorization support: reference extfrc(var,11) has unaligned access   [ mo_indprd.F90(222,67) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.486
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 2.310 
   remark #15478: estimated potential speedup: 7.120 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(222,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,76) has unaligned access
   remark #15389: vectorization support: reference rxt(var,99) has unaligned access
   remark #15389: vectorization support: reference rxt(var,101) has unaligned access
   remark #15389: vectorization support: reference rxt(var,111) has unaligned access   [ mo_indprd.F90(222,34) ]
   remark #15389: vectorization support: reference rxt(var,113) has unaligned access   [ mo_indprd.F90(222,55) ]
   remark #15389: vectorization support: reference extfrc(var,11) has unaligned access   [ mo_indprd.F90(222,67) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.769
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(225,10)
   remark #15389: vectorization support: reference prod(var,100) has unaligned access
   remark #15389: vectorization support: reference rxt(var,94) has unaligned access
   remark #15389: vectorization support: reference rxt(var,98) has unaligned access
   remark #15389: vectorization support: reference rxt(var,99) has unaligned access   [ mo_indprd.F90(225,35) ]
   remark #15389: vectorization support: reference rxt(var,106) has unaligned access   [ mo_indprd.F90(225,46) ]
   remark #15389: vectorization support: reference rxt(var,110) has unaligned access   [ mo_indprd.F90(225,57) ]
   remark #15389: vectorization support: reference rxt(var,111) has unaligned access   [ mo_indprd.F90(225,69) ]
   remark #15389: vectorization support: reference extfrc(var,13) has unaligned access   [ mo_indprd.F90(225,81) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.615
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 7 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 2.430 
   remark #15478: estimated potential speedup: 7.080 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(225,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,100) has unaligned access
   remark #15389: vectorization support: reference rxt(var,94) has unaligned access
   remark #15389: vectorization support: reference rxt(var,98) has unaligned access
   remark #15389: vectorization support: reference rxt(var,99) has unaligned access   [ mo_indprd.F90(225,35) ]
   remark #15389: vectorization support: reference rxt(var,106) has unaligned access   [ mo_indprd.F90(225,46) ]
   remark #15389: vectorization support: reference rxt(var,110) has unaligned access   [ mo_indprd.F90(225,57) ]
   remark #15389: vectorization support: reference rxt(var,111) has unaligned access   [ mo_indprd.F90(225,69) ]
   remark #15389: vectorization support: reference extfrc(var,13) has unaligned access   [ mo_indprd.F90(225,81) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.837
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(228,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(228,10)
      remark #15389: vectorization support: reference prod(var,114) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(228,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,114) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(230,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(230,10)
      remark #15389: vectorization support: reference prod(var,109) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(230,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,109) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(232,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(232,10)
      remark #15389: vectorization support: reference prod(var,103) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(232,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,103) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(234,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(234,10)
      remark #15389: vectorization support: reference prod(var,116) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(234,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,116) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(236,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(236,10)
      remark #15389: vectorization support: reference prod(var,87) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(236,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,87) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(238,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(238,10)
      remark #15389: vectorization support: reference prod(var,82) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(238,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,82) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(240,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(240,10)
      remark #15389: vectorization support: reference prod(var,127) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(240,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,127) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(242,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(242,10)
      remark #15389: vectorization support: reference prod(var,75) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(242,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,75) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(244,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(244,10)
      remark #15389: vectorization support: reference prod(var,74) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(244,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,74) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(246,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(246,10)
      remark #15389: vectorization support: reference prod(var,61) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(246,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,61) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(248,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(248,10)
      remark #15389: vectorization support: reference prod(var,53) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(248,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,53) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(250,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(250,10)
      remark #15389: vectorization support: reference prod(var,77) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(250,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,77) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(252,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(252,10)
      remark #15389: vectorization support: reference prod(var,29) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(252,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,29) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(254,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(254,10)
      remark #15389: vectorization support: reference prod(var,81) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(254,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,81) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(256,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(256,10)
      remark #15389: vectorization support: reference prod(var,30) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(256,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,30) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(258,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(258,10)
      remark #15389: vectorization support: reference prod(var,56) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(258,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,56) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(260,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(260,10)
      remark #15389: vectorization support: reference prod(var,93) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(260,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,93) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(262,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(262,10)
      remark #15389: vectorization support: reference prod(var,90) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(262,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,90) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(264,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(264,10)
      remark #15389: vectorization support: reference prod(var,68) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(264,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,68) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(266,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(266,10)
      remark #15389: vectorization support: reference prod(var,91) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(266,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,91) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(268,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(268,10)
      remark #15389: vectorization support: reference prod(var,57) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(268,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,57) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(270,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(270,10)
      remark #15389: vectorization support: reference prod(var,38) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(270,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,38) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(272,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(272,10)
      remark #15389: vectorization support: reference prod(var,39) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(272,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,39) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(274,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(274,10)
      remark #15389: vectorization support: reference prod(var,84) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(274,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,84) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(276,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(276,10)
      remark #15389: vectorization support: reference prod(var,62) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(276,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,62) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(278,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(278,10)
      remark #15389: vectorization support: reference prod(var,45) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(278,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,45) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(280,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(280,10)
      remark #15389: vectorization support: reference prod(var,112) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(280,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,112) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(282,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(282,10)
      remark #15389: vectorization support: reference prod(var,70) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(282,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,70) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(284,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(284,10)
      remark #15389: vectorization support: reference prod(var,85) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(284,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,85) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(286,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(286,10)
      remark #15389: vectorization support: reference prod(var,95) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(286,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,95) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(288,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(288,10)
      remark #15389: vectorization support: reference prod(var,31) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(288,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,31) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(290,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(290,10)
      remark #15389: vectorization support: reference prod(var,63) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(290,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,63) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(292,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(292,10)
      remark #15389: vectorization support: reference prod(var,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(292,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(294,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(294,10)
      remark #15389: vectorization support: reference prod(var,32) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(294,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,32) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(296,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(296,10)
      remark #15389: vectorization support: reference prod(var,71) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(296,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,71) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(298,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(298,10)
      remark #15389: vectorization support: reference prod(var,2) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(298,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,2) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(300,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(300,10)
      remark #15389: vectorization support: reference prod(var,123) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(300,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,123) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(302,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(302,10)
      remark #15389: vectorization support: reference prod(var,125) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(302,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,125) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(304,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(304,10)
      remark #15389: vectorization support: reference prod(var,119) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(304,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,119) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(306,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(306,10)
      remark #15389: vectorization support: reference prod(var,124) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(306,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,124) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(308,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(308,10)
      remark #15389: vectorization support: reference prod(var,58) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(308,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,58) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(310,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(310,10)
      remark #15389: vectorization support: reference prod(var,126) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(310,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,126) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(312,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(312,10)
      remark #15389: vectorization support: reference prod(var,106) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(312,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,106) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(314,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(314,10)
      remark #15389: vectorization support: reference prod(var,59) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(314,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,59) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(316,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(316,10)
      remark #15389: vectorization support: reference prod(var,86) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(316,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,86) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(318,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(318,10)
      remark #15389: vectorization support: reference prod(var,35) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(318,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,35) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(320,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(320,10)
      remark #15389: vectorization support: reference prod(var,108) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(320,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,108) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(322,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(322,10)
      remark #15389: vectorization support: reference prod(var,64) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(322,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,64) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(324,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(324,10)
      remark #15389: vectorization support: reference prod(var,94) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(324,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,94) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(326,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(326,10)
      remark #15389: vectorization support: reference prod(var,65) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(326,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,65) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(328,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(328,10)
      remark #15389: vectorization support: reference prod(var,79) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(328,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,79) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(330,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(330,10)
      remark #15389: vectorization support: reference prod(var,51) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(330,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,51) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(332,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(332,10)
      remark #15389: vectorization support: reference prod(var,110) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(332,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,110) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(334,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(334,10)
      remark #15389: vectorization support: reference prod(var,118) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(334,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,118) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(336,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(336,10)
      remark #15389: vectorization support: reference prod(var,97) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(336,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,97) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(338,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(338,10)
      remark #15389: vectorization support: reference prod(var,69) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(338,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,69) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(340,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(340,10)
      remark #15389: vectorization support: reference prod(var,40) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(340,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,40) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(342,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(342,10)
      remark #15389: vectorization support: reference prod(var,60) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(342,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,60) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(344,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(344,10)
      remark #15389: vectorization support: reference prod(var,117) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(344,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,117) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(346,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(346,10)
      remark #15389: vectorization support: reference prod(var,121) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(346,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,121) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(348,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(348,10)
      remark #15389: vectorization support: reference prod(var,102) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(348,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,102) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(350,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(350,10)
      remark #15389: vectorization support: reference prod(var,111) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(350,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,111) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(352,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(352,10)
      remark #15389: vectorization support: reference prod(var,122) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(352,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,122) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(354,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(354,10)
      remark #15389: vectorization support: reference prod(var,52) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(354,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,52) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(356,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(356,10)
      remark #15389: vectorization support: reference prod(var,83) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(356,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,83) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(358,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(358,10)
      remark #15389: vectorization support: reference prod(var,54) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(358,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,54) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(360,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(360,10)
      remark #15389: vectorization support: reference prod(var,78) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(360,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,78) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(362,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(362,10)
      remark #15389: vectorization support: reference prod(var,66) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(362,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,66) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(364,10)
   remark #15389: vectorization support: reference prod(var,41) has unaligned access
   remark #15389: vectorization support: reference rxt(var,41) has unaligned access
   remark #15389: vectorization support: reference y(var,111) has unaligned access
   remark #15389: vectorization support: reference rxt(var,42) has unaligned access   [ mo_indprd.F90(364,31) ]
   remark #15389: vectorization support: reference y(var,112) has unaligned access   [ mo_indprd.F90(364,31) ]
   remark #15389: vectorization support: reference rxt(var,45) has unaligned access   [ mo_indprd.F90(364,41) ]
   remark #15389: vectorization support: reference y(var,113) has unaligned access   [ mo_indprd.F90(364,41) ]
   remark #15389: vectorization support: reference rxt(var,49) has unaligned access   [ mo_indprd.F90(364,61) ]
   remark #15389: vectorization support: reference y(var,116) has unaligned access   [ mo_indprd.F90(364,61) ]
   remark #15389: vectorization support: reference rxt(var,50) has unaligned access   [ mo_indprd.F90(365,19) ]
   remark #15389: vectorization support: reference y(var,117) has unaligned access   [ mo_indprd.F90(365,19) ]
   remark #15389: vectorization support: reference rxt(var,47) has unaligned access   [ mo_indprd.F90(365,39) ]
   remark #15389: vectorization support: reference y(var,119) has unaligned access   [ mo_indprd.F90(365,39) ]
   remark #15389: vectorization support: reference rxt(var,43) has unaligned access   [ mo_indprd.F90(365,59) ]
   remark #15389: vectorization support: reference y(var,120) has unaligned access   [ mo_indprd.F90(366,28) ]
   remark #15389: vectorization support: reference rxt(var,44) has unaligned access   [ mo_indprd.F90(366,19) ]
   remark #15389: vectorization support: reference y(var,121) has unaligned access   [ mo_indprd.F90(366,57) ]
   remark #15389: vectorization support: reference rxt(var,53) has unaligned access   [ mo_indprd.F90(366,48) ]
   remark #15389: vectorization support: reference y(var,122) has unaligned access   [ mo_indprd.F90(366,48) ]
   remark #15389: vectorization support: reference rxt(var,54) has unaligned access   [ mo_indprd.F90(366,77) ]
   remark #15389: vectorization support: reference y(var,123) has unaligned access   [ mo_indprd.F90(367,37) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.543
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 20 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 59 
   remark #15477: vector loop cost: 7.250 
   remark #15478: estimated potential speedup: 7.420 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(364,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,41) has unaligned access
   remark #15389: vectorization support: reference rxt(var,41) has unaligned access
   remark #15389: vectorization support: reference y(var,111) has unaligned access
   remark #15389: vectorization support: reference rxt(var,42) has unaligned access   [ mo_indprd.F90(364,31) ]
   remark #15389: vectorization support: reference y(var,112) has unaligned access   [ mo_indprd.F90(364,31) ]
   remark #15389: vectorization support: reference rxt(var,45) has unaligned access   [ mo_indprd.F90(364,41) ]
   remark #15389: vectorization support: reference y(var,113) has unaligned access   [ mo_indprd.F90(364,41) ]
   remark #15389: vectorization support: reference rxt(var,49) has unaligned access   [ mo_indprd.F90(364,61) ]
   remark #15389: vectorization support: reference y(var,116) has unaligned access   [ mo_indprd.F90(364,61) ]
   remark #15389: vectorization support: reference rxt(var,50) has unaligned access   [ mo_indprd.F90(365,19) ]
   remark #15389: vectorization support: reference y(var,117) has unaligned access   [ mo_indprd.F90(365,19) ]
   remark #15389: vectorization support: reference rxt(var,47) has unaligned access   [ mo_indprd.F90(365,39) ]
   remark #15389: vectorization support: reference y(var,119) has unaligned access   [ mo_indprd.F90(365,39) ]
   remark #15389: vectorization support: reference rxt(var,43) has unaligned access   [ mo_indprd.F90(365,59) ]
   remark #15389: vectorization support: reference y(var,120) has unaligned access   [ mo_indprd.F90(366,28) ]
   remark #15389: vectorization support: reference rxt(var,44) has unaligned access   [ mo_indprd.F90(366,19) ]
   remark #15389: vectorization support: reference y(var,121) has unaligned access   [ mo_indprd.F90(366,57) ]
   remark #15389: vectorization support: reference rxt(var,53) has unaligned access   [ mo_indprd.F90(366,48) ]
   remark #15389: vectorization support: reference y(var,122) has unaligned access   [ mo_indprd.F90(366,48) ]
   remark #15389: vectorization support: reference rxt(var,54) has unaligned access   [ mo_indprd.F90(366,77) ]
   remark #15389: vectorization support: reference y(var,123) has unaligned access   [ mo_indprd.F90(367,37) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.641
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(369,10)
   remark #15389: vectorization support: reference prod(var,46) has unaligned access
   remark #15389: vectorization support: reference rxt(var,40) has unaligned access
   remark #15389: vectorization support: reference y(var,110) has unaligned access
   remark #15389: vectorization support: reference rxt(var,42) has unaligned access   [ mo_indprd.F90(369,31) ]
   remark #15389: vectorization support: reference y(var,112) has unaligned access   [ mo_indprd.F90(369,31) ]
   remark #15389: vectorization support: reference rxt(var,46) has unaligned access   [ mo_indprd.F90(369,41) ]
   remark #15389: vectorization support: reference y(var,118) has unaligned access   [ mo_indprd.F90(369,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.618
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 6 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 2.120 
   remark #15478: estimated potential speedup: 7.270 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(369,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,46) has unaligned access
   remark #15389: vectorization support: reference rxt(var,40) has unaligned access
   remark #15389: vectorization support: reference y(var,110) has unaligned access
   remark #15389: vectorization support: reference rxt(var,42) has unaligned access   [ mo_indprd.F90(369,31) ]
   remark #15389: vectorization support: reference y(var,112) has unaligned access   [ mo_indprd.F90(369,31) ]
   remark #15389: vectorization support: reference rxt(var,46) has unaligned access   [ mo_indprd.F90(369,41) ]
   remark #15389: vectorization support: reference y(var,118) has unaligned access   [ mo_indprd.F90(369,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.868
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(371,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(371,10)
      remark #15389: vectorization support: reference prod(var,48) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(371,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,48) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(373,10)
   remark #15389: vectorization support: reference prod(var,101) has unaligned access
   remark #15389: vectorization support: reference rxt(var,49) has unaligned access
   remark #15389: vectorization support: reference y(var,116) has unaligned access
   remark #15389: vectorization support: reference rxt(var,44) has unaligned access   [ mo_indprd.F90(373,32) ]
   remark #15389: vectorization support: reference y(var,121) has unaligned access   [ mo_indprd.F90(373,32) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 12 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.270 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mo_indprd.F90(373,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference prod(var,101) has unaligned access
   remark #15389: vectorization support: reference rxt(var,49) has unaligned access
   remark #15389: vectorization support: reference y(var,116) has unaligned access
   remark #15389: vectorization support: reference rxt(var,44) has unaligned access   [ mo_indprd.F90(373,32) ]
   remark #15389: vectorization support: reference y(var,121) has unaligned access   [ mo_indprd.F90(373,32) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.964
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mo_indprd.F90(375,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(375,10)
      remark #15389: vectorization support: reference prod(var,36) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,4) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(375,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,36) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,4) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(377,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(377,10)
      remark #15389: vectorization support: reference prod(var,49) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(377,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,49) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(379,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(379,10)
      remark #15389: vectorization support: reference prod(var,3) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,5) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(379,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,3) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,5) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(381,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(381,10)
      remark #15389: vectorization support: reference prod(var,33) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(381,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,33) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(383,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(383,10)
      remark #15389: vectorization support: reference prod(var,4) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(383,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,4) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(385,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(385,10)
      remark #15389: vectorization support: reference prod(var,5) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(385,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,5) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(387,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(387,10)
      remark #15389: vectorization support: reference prod(var,6) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(387,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,6) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(389,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(389,10)
      remark #15389: vectorization support: reference prod(var,7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(389,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(391,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(391,10)
      remark #15389: vectorization support: reference prod(var,8) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(391,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,8) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(393,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(393,10)
      remark #15389: vectorization support: reference prod(var,9) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(393,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,9) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(395,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(395,10)
      remark #15389: vectorization support: reference prod(var,10) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(395,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,10) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(397,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(397,10)
      remark #15389: vectorization support: reference prod(var,11) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(397,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,11) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(399,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(399,10)
      remark #15389: vectorization support: reference prod(var,12) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(399,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,12) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(401,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(401,10)
      remark #15389: vectorization support: reference prod(var,13) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(401,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,13) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(403,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(403,10)
      remark #15389: vectorization support: reference prod(var,14) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(403,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,14) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(405,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(405,10)
      remark #15389: vectorization support: reference prod(var,15) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(405,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,15) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(407,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(407,10)
      remark #15389: vectorization support: reference prod(var,16) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,6) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(407,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,16) has unaligned access
      remark #15389: vectorization support: reference extfrc(var,6) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.385
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(409,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(409,10)
      remark #15389: vectorization support: reference prod(var,17) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(409,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,17) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(411,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(411,10)
      remark #15389: vectorization support: reference prod(var,18) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(411,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,18) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(413,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(413,10)
      remark #15389: vectorization support: reference prod(var,19) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(413,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,19) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(415,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(415,10)
      remark #15389: vectorization support: reference prod(var,20) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(415,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,20) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(417,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(417,10)
      remark #15389: vectorization support: reference prod(var,21) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(417,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,21) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(419,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(419,10)
      remark #15389: vectorization support: reference prod(var,22) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(419,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,22) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(421,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(421,10)
      remark #15389: vectorization support: reference prod(var,23) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(421,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,23) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(423,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(423,10)
      remark #15389: vectorization support: reference prod(var,24) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(423,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,24) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(425,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(425,10)
      remark #15389: vectorization support: reference prod(var,25) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(425,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,25) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(427,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(427,10)
      remark #15389: vectorization support: reference prod(var,26) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(427,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,26) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at mo_indprd.F90(429,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_indprd.F90(429,10)
      remark #15389: vectorization support: reference prod(var,27) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.620 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_indprd.F90(429,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference prod(var,27) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mo_indprd.F90(41,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(41,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(47,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(47,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(49,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(49,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(51,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(51,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(53,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(53,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(55,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(55,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(57,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(57,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(59,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(59,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(61,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(61,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(63,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(63,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(65,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(65,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(67,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(67,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(69,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(69,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(71,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(71,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(73,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(73,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(75,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(75,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(77,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(77,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(79,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(79,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(81,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(81,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(92,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(92,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(94,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(94,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(96,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(96,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(98,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(98,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(100,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(100,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(102,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(102,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(104,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(104,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(106,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(106,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(108,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(108,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(108,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(110,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(110,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(112,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(112,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(114,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(114,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(116,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(116,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(118,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(118,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(120,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(120,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(126,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(126,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(132,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(132,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(134,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(134,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(136,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(136,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(146,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(146,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(146,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(148,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(148,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(148,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(152,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(152,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(154,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(154,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(156,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(156,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(158,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(158,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(162,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(162,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(164,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(164,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(166,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(166,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(172,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(172,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(174,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(174,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(184,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(184,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(186,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(186,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(188,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(188,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(190,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(190,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(192,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(192,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(194,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(194,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(196,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(196,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(198,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(198,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(204,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(204,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(206,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(206,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(208,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(208,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(210,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(210,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(214,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(214,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(214,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(218,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(218,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(218,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(220,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(220,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(228,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(228,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(230,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(230,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(232,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(232,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(234,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(234,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(236,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(236,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(238,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(238,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(240,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(240,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(242,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(242,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(244,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(244,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(246,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(246,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(248,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(248,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(250,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(250,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(252,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(252,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(254,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(254,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(256,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(256,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(258,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(258,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(260,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(260,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(262,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(262,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(264,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(264,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(266,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(266,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(268,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(268,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(270,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(270,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(272,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(272,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(274,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(274,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(276,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(276,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(278,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(278,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(280,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(280,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(282,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(282,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(284,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(284,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(286,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(286,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(288,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(288,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(290,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(290,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(292,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(292,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(294,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(294,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(296,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(296,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(298,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(298,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(300,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(300,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(302,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(302,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(304,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(304,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(306,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(306,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(308,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(308,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(310,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(310,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(312,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(312,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(314,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(314,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(316,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(316,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(318,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(318,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(320,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(320,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(322,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(322,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(324,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(324,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(326,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(326,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(328,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(328,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(330,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(330,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(332,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(332,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(334,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(334,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(336,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(336,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(338,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(338,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(340,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(340,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(342,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(342,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(344,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(344,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(346,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(346,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(348,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(348,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(350,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(350,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(352,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(352,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(354,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(354,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(356,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(356,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(358,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(358,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(360,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(360,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(362,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(362,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(371,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(371,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(375,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(375,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(375,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(377,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(377,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(379,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(379,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(379,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(381,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(381,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(383,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(383,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(385,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(385,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(387,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(387,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(389,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(389,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(391,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(391,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(393,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(393,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(395,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(395,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(397,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(397,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(399,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(399,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(401,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(401,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(403,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(403,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(405,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(405,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(407,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(407,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(407,10):remark #34026: call to memcpy implemented as a call to optimized library version
mo_indprd.F90(409,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(409,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(411,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(411,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(413,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(413,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(415,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(415,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(417,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(417,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(419,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(419,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(421,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(421,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(423,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(423,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(425,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(425,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(427,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(427,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(429,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_indprd.F90(429,10):remark #34026: call to memset implemented as a call to optimized library version
mo_indprd.F90(22,18):remark #34051: REGISTER ALLOCATION : [mo_indprd_mp_indprd_] mo_indprd.F90:22

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1]
        
    Routine temporaries
        Total         :    5512
            Global    :    2116
            Local     :    3396
        Regenerable   :     619
        Spilled       :     236
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    1848 bytes*
            Reads     :     401 [2.61e+02 ~ 4.1%]
            Writes    :     330 [8.64e+01 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
