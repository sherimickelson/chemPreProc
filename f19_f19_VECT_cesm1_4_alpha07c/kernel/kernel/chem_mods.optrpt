Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.042 Beta Build 20160315

Compiler options: -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -qopt-report=5 -no-opt-dynamic-align -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source -debug minimal -openmp -free -xMIC-AVX512 -c -o chem_mods.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: chem_mods._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (chem_mods._) [1/2=50.0%] chem_mods.F90(11,14)


    Report from: Code generation optimizations [cg]

chem_mods.F90(11,14):remark #34051: REGISTER ALLOCATION : [chem_mods._] chem_mods.F90:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CHEM_MODS::KR_EXTERNS_IN_CHEM_MODS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CHEM_MODS::KR_EXTERNS_IN_CHEM_MODS) [2/2=100.0%] chem_mods.F90(61,18)
  -> EXTERN: (66,11) for_read_seq
  -> EXTERN: (68,15) for_read_seq
  -> EXTERN: (69,15) for_read_seq
  -> EXTERN: (70,20) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (72,11) for_read_seq
  -> EXTERN: (74,15) for_read_seq
  -> EXTERN: (75,15) for_read_seq
  -> EXTERN: (76,20) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (78,11) for_read_seq
  -> EXTERN: (80,15) for_read_seq
  -> EXTERN: (81,15) for_read_seq
  -> EXTERN: (82,20) KGEN_ARRAY_SUMCHECK


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at chem_mods.F90(70,76)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 5  

   LOOP BEGIN at chem_mods.F90(70,76)
      remark #15388: vectorization support: reference cls_rxt_cnt(var,var) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15427: loop was completely unrolled
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector loop cost summary ---
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at chem_mods.F90(70,76)
   LOOP END

   LOOP BEGIN at chem_mods.F90(70,76)
   LOOP END

   LOOP BEGIN at chem_mods.F90(70,76)
   LOOP END

   LOOP BEGIN at chem_mods.F90(70,76)
   LOOP END
LOOP END

LOOP BEGIN at chem_mods.F90(76,71)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at chem_mods.F90(76,71)
      remark #15389: vectorization support: reference clsmap(var,var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15399: vectorization support: unroll factor set to 5
      remark #15309: vectorization support: normalized vectorization overhead 0.055
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.340 
      remark #15478: estimated potential speedup: 6.860 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at chem_mods.F90(76,71)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference clsmap(var,var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 2.556
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at chem_mods.F90(76,71)
   <Remainder, Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at chem_mods.F90(82,72)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at chem_mods.F90(82,72)
      remark #15389: vectorization support: reference permute(var,var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15399: vectorization support: unroll factor set to 5
      remark #15309: vectorization support: normalized vectorization overhead 0.055
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 0.340 
      remark #15478: estimated potential speedup: 6.860 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at chem_mods.F90(82,72)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference permute(var,var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 2.556
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at chem_mods.F90(82,72)
   <Remainder, Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

chem_mods.F90(61,18):remark #34051: REGISTER ALLOCATION : [chem_mods_mp_kr_externs_in_chem_mods_] chem_mods.F90:61

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8-r9 r13-r14 zmm0-zmm11]
        
    Routine temporaries
        Total         :     216
            Global    :      31
            Local     :     185
        Regenerable   :     101
        Spilled       :       2
        
    Routine stack
        Variables     :     196 bytes*
            Reads     :       3 [3.00e+00 ~ 0.0%]
            Writes    :      24 [1.32e+01 ~ 0.1%]
        Spills        :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
