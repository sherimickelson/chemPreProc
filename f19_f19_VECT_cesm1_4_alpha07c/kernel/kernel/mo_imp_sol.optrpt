Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.042 Beta Build 20160315

Compiler options: -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -qopt-report=5 -no-opt-dynamic-align -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source -debug minimal -openmp -free -xMIC-AVX512 -c -o mo_imp_sol.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: mo_imp_sol._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mo_imp_sol._) [1/4=25.0%] mo_imp_sol.F90(11,14)


    Report from: Code generation optimizations [cg]

mo_imp_sol.F90(11,14):remark #34051: REGISTER ALLOCATION : [mo_imp_sol._] mo_imp_sol.F90:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MO_IMP_SOL::IMP_SOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_IMP_SOL::IMP_SOL) [2/4=50.0%] mo_imp_sol.F90(53,18)
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) _alloca
  -> EXTERN: (53,18) __getsp_inlined
  -> EXTERN: (127,15) INDPRD
  -> EXTERN: (176,21) LINMAT
  -> EXTERN: (187,24) NLNMAT
  -> EXTERN: (191,24) LU_FAC
  -> EXTERN: (196,21) IMP_PROD_LOSS
  -> EXTERN: (205,21) LU_SLV
  -> EXTERN: (207,19) _alloca
  -> EXTERN: (210,22) __getsp_inlined
  -> EXTERN: (210,22) __resetsp_inlined
  -> EXTERN: (224,22) _alloca
  -> EXTERN: (227,25) __getsp_inlined
  -> EXTERN: (227,25) __resetsp_inlined
  -> EXTERN: (232,22) _alloca
  -> EXTERN: (235,25) __getsp_inlined
  -> EXTERN: (235,25) __resetsp_inlined
  -> EXTERN: (299,25) for_write_seq_fmt
  -> EXTERN: (299,25) for_write_seq_fmt_xmit
  -> EXTERN: (341,7) __resetsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mo_imp_sol.F90(139,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(139,13)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(139,13)
         remark #15389: vectorization support: reference sbase_sol(var,m) has unaligned access
         remark #15389: vectorization support: reference base_sol(var,m) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 0.750 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(139,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference sbase_sol(var,m) has unaligned access
         remark #15389: vectorization support: reference base_sol(var,m) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.385
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(158,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(158,16)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(158,16)
         remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
         remark #15389: vectorization support: reference base_sol(var,bndx) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 0.750 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(158,16)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
         remark #15389: vectorization support: reference base_sol(var,bndx) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.385
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(165,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(165,19)
      remark #15389: vectorization support: reference iter_invariant(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access   [ mo_imp_sol.F90(165,47) ]
      remark #15389: vectorization support: reference ind_prd(var,m) has unaligned access   [ mo_imp_sol.F90(165,51) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.611
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 1.120 
      remark #15478: estimated potential speedup: 6.460 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(165,19)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference iter_invariant(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access   [ mo_imp_sol.F90(165,47) ]
      remark #15389: vectorization support: reference ind_prd(var,m) has unaligned access   [ mo_imp_sol.F90(165,51) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.048
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(181,13)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(181,13)
      remark #15389: vectorization support: reference cls_conv(var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.310 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(181,13)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cls_conv(var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(199,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(199,19)
      remark #15389: vectorization support: reference forcing(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference iter_invariant(var,m) has unaligned access   [ mo_imp_sol.F90(199,59) ]
      remark #15389: vectorization support: reference prod(var,m) has unaligned access   [ mo_imp_sol.F90(199,59) ]
      remark #15389: vectorization support: reference loss(var,m) has unaligned access   [ mo_imp_sol.F90(200,67) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.607
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 7.270 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(199,19)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference forcing(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference iter_invariant(var,m) has unaligned access   [ mo_imp_sol.F90(199,59) ]
      remark #15389: vectorization support: reference prod(var,m) has unaligned access   [ mo_imp_sol.F90(199,59) ]
      remark #15389: vectorization support: reference loss(var,m) has unaligned access   [ mo_imp_sol.F90(200,67) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.903
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(207,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(207,19)
      remark #15388: vectorization support: reference var(var) has aligned access   [ mo_imp_sol.F90(207,26) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.231
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 0.810 
      remark #15478: estimated potential speedup: 14.820 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(207,19)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference var(var) has aligned access   [ mo_imp_sol.F90(207,26) ]
      remark #15389: vectorization support: reference var(var) has unaligned access   [ mo_imp_sol.F90(207,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.588
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(208,22)
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference forcing(var,m) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 0.145
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 2 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 1.930 
      remark #15478: estimated potential speedup: 5.640 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(208,22)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference forcing(var,m) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.618
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(210,22)
      remark #15389: vectorization support: reference forcing(var,m) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.075
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 9.670 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(210,22)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference forcing(var,m) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.486
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(237,40)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(224,22)
      remark #15388: vectorization support: reference var(var) has aligned access   [ mo_imp_sol.F90(224,59) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 17 
      remark #15477: vector loop cost: 1.120 
      remark #15478: estimated potential speedup: 14.040 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(224,22)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference var(var) has aligned access   [ mo_imp_sol.F90(224,59) ]
      remark #15389: vectorization support: reference var(var) has unaligned access   [ mo_imp_sol.F90(224,59) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.562
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(225,25)
      remark #15389: vectorization support: reference wrk(var) has unaligned access
      remark #15389: vectorization support: reference forcing(var,pndx) has unaligned access
      remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 2 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 26 
      remark #15477: vector loop cost: 6.750 
      remark #15478: estimated potential speedup: 3.590 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(225,25)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference wrk(var) has unaligned access
      remark #15389: vectorization support: reference forcing(var,pndx) has unaligned access
      remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.318
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(227,25)
      remark #15389: vectorization support: reference wrk(var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.075
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 1.250 
      remark #15478: estimated potential speedup: 9.670 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(227,25)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference wrk(var) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.486
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(229,40)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_imp_sol.F90(229,40) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(229,40)
   <Remainder>
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(230,22)
      remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
      remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.462
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 0.810 
      remark #15478: estimated potential speedup: 10.150 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(230,22)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
      remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.125
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(231,22)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(231,22)
         remark #15389: vectorization support: reference base_sol(var,bndx) has unaligned access
         remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 0.750 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(231,22)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference base_sol(var,bndx) has unaligned access
         remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.385
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=1
      LOOP END
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(232,22)
      remark #15388: vectorization support: reference var(var) has aligned access   [ mo_imp_sol.F90(232,58) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 17 
      remark #15477: vector loop cost: 1.120 
      remark #15478: estimated potential speedup: 14.040 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(232,22)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference var(var) has aligned access   [ mo_imp_sol.F90(232,58) ]
      remark #15389: vectorization support: reference var(var) has unaligned access   [ mo_imp_sol.F90(232,58) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.562
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(233,25)
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.226
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 2 
      remark #15457: masked unaligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 18 
      remark #15477: vector loop cost: 3.870 
      remark #15478: estimated potential speedup: 4.300 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(233,25)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.364
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(235,25)
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.214
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 0.870 
      remark #15478: estimated potential speedup: 12.720 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(235,25)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.607
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(237,40)
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 5.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.370 
      remark #15478: estimated potential speedup: 3.890 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(237,40)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference spc_conv(var,cndx) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 2.667
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(239,33)
   remark #15388: vectorization support: reference converged(var) has aligned access
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 9
   remark #15309: vectorization support: normalized vectorization overhead 0.689
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.310 
   remark #15478: estimated potential speedup: 3.390 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at mo_imp_sol.F90(239,33)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference converged(var) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 16
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 3.444
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mo_imp_sol.F90(243,19)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mo_imp_sol.F90(245,39)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: gather was emulated for the variable <spc_conv(m,var)>, strided by non-constant value
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.583
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 0.610 
      remark #15488: --- end vector loop cost summary ---
      remark #25438: unrolled without remainder by 2  
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(254,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(254,22)
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.462
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 0.810 
      remark #15478: estimated potential speedup: 10.150 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at mo_imp_sol.F90(254,22)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15389: vectorization support: reference solution(var,m) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.125
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(262,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(262,22)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(262,22)
         remark #15389: vectorization support: reference base_sol(var,bndx) has unaligned access
         remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 0.750 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(262,22)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference base_sol(var,bndx) has unaligned access
         remark #15389: vectorization support: reference solution(var,pndx) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.385
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mo_imp_sol.F90(297,19)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mo_imp_sol.F90(299,25) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ mo_imp_sol.F90(299,25) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between var (299:25) and var (299:25)
   remark #15346: vector dependence: assumed OUTPUT dependence between var (299:25) and var (299:25)
LOOP END

LOOP BEGIN at mo_imp_sol.F90(325,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mo_imp_sol.F90(325,19)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mo_imp_sol.F90(325,19)
         remark #15389: vectorization support: reference sbase_sol(var,m) has unaligned access
         remark #15389: vectorization support: reference base_sol(var,m) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 0.750 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at mo_imp_sol.F90(325,19)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference sbase_sol(var,m) has unaligned access
         remark #15389: vectorization support: reference base_sol(var,m) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.385
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=1
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at mo_imp_sol.F90(336,18)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at mo_imp_sol.F90(285,22)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

      LOOP BEGIN at mo_imp_sol.F90(266,13)
         remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mo_imp_sol.F90(139,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(139,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(139,13):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(158,16):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(158,16):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(158,16):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(181,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(181,13):remark #34026: call to memset implemented as a call to optimized library version
mo_imp_sol.F90(231,22):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(231,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(231,22):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(325,19):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(325,19):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(325,19):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(262,22):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(262,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
mo_imp_sol.F90(262,22):remark #34026: call to memcpy implemented as a call to optimized library version
mo_imp_sol.F90(53,18):remark #34051: REGISTER ALLOCATION : [mo_imp_sol_mp_imp_sol_] mo_imp_sol.F90:53

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   45[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm23 k0-k7]
        
    Routine temporaries
        Total         :     966
            Global    :     391
            Local     :     575
        Regenerable   :      75
        Spilled       :      71
        
    Routine stack
        Variables     :    1864 bytes*
            Reads     :      20 [1.67e+05 ~ 0.4%]
            Writes    :      12 [3.57e+04 ~ 0.1%]
        Spills        :     680 bytes*
            Reads     :     253 [1.29e+06 ~ 3.0%]
            Writes    :     121 [2.80e+05 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MO_IMP_SOL::KR_EXTERNS_IN_MO_IMP_SOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_IMP_SOL::KR_EXTERNS_IN_MO_IMP_SOL) [3/4=75.0%] mo_imp_sol.F90(344,18)
  -> EXTERN: (349,11) for_read_seq
  -> EXTERN: (351,15) for_read_seq
  -> EXTERN: (352,15) for_read_seq
  -> EXTERN: (353,20) KGEN_ARRAY_SUMCHECK
  -> EXTERN: (355,11) for_read_seq
  -> EXTERN: (357,15) for_read_seq


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mo_imp_sol.F90(353,72)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ mo_imp_sol.F90(353,72) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model
   remark #25438: unrolled without remainder by 2  
LOOP END

    Report from: Code generation optimizations [cg]

mo_imp_sol.F90(344,18):remark #34051: REGISTER ALLOCATION : [mo_imp_sol_mp_kr_externs_in_mo_imp_sol_] mo_imp_sol.F90:344

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r9 r14-r15 zmm0]
        
    Routine temporaries
        Total         :      65
            Global    :      14
            Local     :      51
        Regenerable   :      47
        Spilled       :       2
        
    Routine stack
        Variables     :     140 bytes*
            Reads     :       2 [2.00e+00 ~ 0.9%]
            Writes    :      13 [7.60e+00 ~ 3.3%]
        Spills        :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 0.9%]
            Writes    :       2 [2.00e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MO_IMP_SOL::KR_EXTERNS_OUT_MO_IMP_SOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MO_IMP_SOL::KR_EXTERNS_OUT_MO_IMP_SOL) [4/4=100.0%] mo_imp_sol.F90(362,18)


    Report from: Code generation optimizations [cg]

mo_imp_sol.F90(362,18):remark #34051: REGISTER ALLOCATION : [mo_imp_sol_mp_kr_externs_out_mo_imp_sol_] mo_imp_sol.F90:362

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
