Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.042 Beta Build 20160315

Compiler options: -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -I/usr/local/intel/2017_beta/compilers_and_libraries_2017.0.042/linux/mpi/intel64/include -qopt-report=5 -no-opt-dynamic-align -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source -debug minimal -openmp -free -xMIC-AVX512 -c -o kgen_utils.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: kgen_utils_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (kgen_utils_mod._) [1/18=5.6%] kgen_utils.f90(1,8)


    Report from: Code generation optimizations [cg]

kgen_utils.f90(1,8):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod._] kgen_utils.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_ARRAY_SUMCHECK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_ARRAY_SUMCHECK) [2/18=11.1%] kgen_utils.f90(43,12)
  -> EXTERN: (63,17) for_write_seq_lis
  -> EXTERN: (64,17) for_write_seq_lis
  -> EXTERN: (64,17) for_write_seq_lis_xmit
  -> EXTERN: (64,17) for_write_seq_lis_xmit
  -> EXTERN: (65,17) for_write_seq_lis
  -> EXTERN: (65,17) for_write_seq_lis_xmit
  -> EXTERN: (66,17) for_write_seq_lis
  -> EXTERN: (66,17) for_write_seq_lis_xmit
  -> EXTERN: (67,17) for_write_seq_lis
  -> EXTERN: (67,17) for_write_seq_lis_xmit
  -> EXTERN: (68,17) for_write_seq_lis
  -> EXTERN: (68,17) for_write_seq_lis_xmit
  -> EXTERN: (71,21) for_stop_core
  -> EXTERN: (75,13) for_write_seq_lis
  -> EXTERN: (76,13) for_write_seq_lis_xmit
  -> EXTERN: (76,13) for_write_seq_lis_xmit
  -> EXTERN: (76,13) for_write_seq_lis
  -> EXTERN: (77,13) for_write_seq_lis_xmit
  -> EXTERN: (77,13) for_write_seq_lis
  -> EXTERN: (78,13) for_write_seq_lis_xmit
  -> EXTERN: (78,13) for_write_seq_lis
  -> EXTERN: (79,13) for_write_seq_lis_xmit
  -> EXTERN: (79,13) for_write_seq_lis
  -> EXTERN: (82,17) for_stop_core


    Report from: Code generation optimizations [cg]

kgen_utils.f90(43,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_array_sumcheck_] kgen_utils.f90:43

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rsi rdi r8-r9 r13-r15 zmm0-zmm4 k0]
        
    Routine temporaries
        Total         :     189
            Global    :      17
            Local     :     172
        Regenerable   :     164
        Spilled       :       7
        
    Routine stack
        Variables     :     360 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      48 [1.21e+01 ~ 12.9%]
        Spills        :      56 bytes*
            Reads     :      12 [6.36e+00 ~ 6.8%]
            Writes    :       7 [6.55e+00 ~ 7.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_TOSTR_ARGS1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_TOSTR_ARGS1) [3/18=16.7%] kgen_utils.f90(88,10)
  -> EXTERN: (93,5) for_write_int_lis
  -> EXTERN: (94,5) for_cpystr
  -> EXTERN: (94,13) for_trim
  -> EXTERN: (94,18) for_adjustl


    Report from: Code generation optimizations [cg]

kgen_utils.f90(88,10):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_tostr_args1_] kgen_utils.f90:88

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
        
    Routine temporaries
        Total         :      41
            Global    :      12
            Local     :      29
        Regenerable   :      23
        Spilled       :       1
        
    Routine stack
        Variables     :     280 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       4 [4.00e+00 ~ 8.5%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 2.1%]
            Writes    :       1 [1.00e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_TOSTR_ARGS2

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_TOSTR_ARGS2) [4/18=22.2%] kgen_utils.f90(97,10)
  -> EXTERN: (102,5) for_write_int_lis
  -> EXTERN: (103,5) for_write_int_lis
  -> EXTERN: (104,5) for_concat
  -> EXTERN: (104,13) for_trim
  -> EXTERN: (104,18) for_adjustl
  -> EXTERN: (104,48) for_trim
  -> EXTERN: (104,53) for_adjustl


    Report from: Code generation optimizations [cg]

kgen_utils.f90(97,10):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_tostr_args2_] kgen_utils.f90:97

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8-r9 r12]
        
    Routine temporaries
        Total         :      65
            Global    :      20
            Local     :      45
        Regenerable   :      42
        Spilled       :       2
        
    Routine stack
        Variables     :     544 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [1.40e+01 ~ 17.1%]
        Spills        :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 2.4%]
            Writes    :       2 [2.00e+00 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_TOSTR_ARGS3

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_TOSTR_ARGS3) [5/18=27.8%] kgen_utils.f90(107,10)
  -> EXTERN: (112,5) for_write_int_lis
  -> EXTERN: (113,5) for_write_int_lis
  -> EXTERN: (114,5) for_write_int_lis
  -> EXTERN: (115,5) for_concat
  -> EXTERN: (115,13) for_trim
  -> EXTERN: (115,18) for_adjustl
  -> EXTERN: (115,48) for_trim
  -> EXTERN: (115,53) for_adjustl
  -> EXTERN: (116,20) for_trim
  -> EXTERN: (116,25) for_adjustl


    Report from: Code generation optimizations [cg]

kgen_utils.f90(107,10):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_tostr_args3_] kgen_utils.f90:107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r10 r12 r15]
        
    Routine temporaries
        Total         :      89
            Global    :      26
            Local     :      63
        Regenerable   :      60
        Spilled       :       3
        
    Routine stack
        Variables     :     792 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      22 [2.20e+01 ~ 19.1%]
        Spills        :      24 bytes*
            Reads     :       3 [3.00e+00 ~ 2.6%]
            Writes    :       3 [3.00e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_TOSTR_ARGS4

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_TOSTR_ARGS4) [6/18=33.3%] kgen_utils.f90(119,10)
  -> EXTERN: (124,5) for_write_int_lis
  -> EXTERN: (125,5) for_write_int_lis
  -> EXTERN: (126,5) for_write_int_lis
  -> EXTERN: (127,5) for_write_int_lis
  -> EXTERN: (128,5) for_concat
  -> EXTERN: (128,13) for_trim
  -> EXTERN: (128,18) for_adjustl
  -> EXTERN: (128,48) for_trim
  -> EXTERN: (128,53) for_adjustl
  -> EXTERN: (129,20) for_trim
  -> EXTERN: (129,25) for_adjustl
  -> EXTERN: (129,55) for_trim
  -> EXTERN: (129,60) for_adjustl


    Report from: Code generation optimizations [cg]

kgen_utils.f90(119,10):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_tostr_args4_] kgen_utils.f90:119

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r12 r14-r15]
        
    Routine temporaries
        Total         :     113
            Global    :      32
            Local     :      81
        Regenerable   :      78
        Spilled       :       4
        
    Routine stack
        Variables     :    1040 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      30 [3.00e+01 ~ 20.3%]
        Spills        :      32 bytes*
            Reads     :       4 [4.00e+00 ~ 2.7%]
            Writes    :       4 [4.00e+00 ~ 2.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_TOSTR_ARGS5

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_TOSTR_ARGS5) [7/18=38.9%] kgen_utils.f90(132,10)
  -> EXTERN: (137,5) for_write_int_lis
  -> EXTERN: (138,5) for_write_int_lis
  -> EXTERN: (139,5) for_write_int_lis
  -> EXTERN: (140,5) for_write_int_lis
  -> EXTERN: (141,5) for_write_int_lis
  -> EXTERN: (142,5) for_concat
  -> EXTERN: (142,13) for_trim
  -> EXTERN: (142,18) for_adjustl
  -> EXTERN: (142,48) for_trim
  -> EXTERN: (142,53) for_adjustl
  -> EXTERN: (143,20) for_trim
  -> EXTERN: (143,25) for_adjustl
  -> EXTERN: (143,55) for_trim
  -> EXTERN: (143,60) for_adjustl
  -> EXTERN: (144,20) for_trim
  -> EXTERN: (144,25) for_adjustl


    Report from: Code generation optimizations [cg]

kgen_utils.f90(132,10):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_tostr_args5_] kgen_utils.f90:132

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r12 r14-r15]
        
    Routine temporaries
        Total         :     136
            Global    :      37
            Local     :      99
        Regenerable   :      97
        Spilled       :       4
        
    Routine stack
        Variables     :    1288 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      38 [3.80e+01 ~ 21.5%]
        Spills        :      32 bytes*
            Reads     :       4 [4.00e+00 ~ 2.3%]
            Writes    :       4 [4.00e+00 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_TOSTR_ARGS6

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_TOSTR_ARGS6) [8/18=44.4%] kgen_utils.f90(147,10)
  -> EXTERN: (152,5) for_write_int_lis
  -> EXTERN: (153,5) for_write_int_lis
  -> EXTERN: (154,5) for_write_int_lis
  -> EXTERN: (155,5) for_write_int_lis
  -> EXTERN: (156,5) for_write_int_lis
  -> EXTERN: (157,5) for_write_int_lis
  -> EXTERN: (158,5) for_concat
  -> EXTERN: (158,13) for_trim
  -> EXTERN: (158,18) for_adjustl
  -> EXTERN: (158,48) for_trim
  -> EXTERN: (158,53) for_adjustl
  -> EXTERN: (159,20) for_trim
  -> EXTERN: (159,25) for_adjustl
  -> EXTERN: (159,55) for_trim
  -> EXTERN: (159,60) for_adjustl
  -> EXTERN: (160,20) for_trim
  -> EXTERN: (160,25) for_adjustl
  -> EXTERN: (160,55) for_trim
  -> EXTERN: (160,60) for_adjustl


    Report from: Code generation optimizations [cg]

kgen_utils.f90(147,10):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_tostr_args6_] kgen_utils.f90:147

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :     159
            Global    :      42
            Local     :     117
        Regenerable   :     116
        Spilled       :       4
        
    Routine stack
        Variables     :    1536 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      46 [4.60e+01 ~ 22.3%]
        Spills        :      32 bytes*
            Reads     :       4 [4.00e+00 ~ 1.9%]
            Writes    :       4 [4.00e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_PERTURB_REAL4_DIM1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_PERTURB_REAL4_DIM1) [9/18=50.0%] kgen_utils.f90(163,12)
  -> EXTERN: (171,10) for_random_seed_bit_size
  -> EXTERN: (172,5) for_alloc_allocatable
  -> EXTERN: (172,5) for_check_mult_overflow64
  -> EXTERN: (174,10) for_random_seed_put
  -> EXTERN: (176,14) for_random_number_single
  -> EXTERN: (180,5) for_dealloc_allocatable
  -> EXTERN: (181,1) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at kgen_utils.f90(173,5)
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.250 
   remark #15478: estimated potential speedup: 6.590 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(173,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(175,5)
   remark #15329: vectorization support: scatter was emulated for the variable <*var(idx1)>, strided by non-constant value   [ kgen_utils.f90(178,9) ]
   remark #15415: vectorization support: gather was generated for the variable <*var(idx1)>, strided by non-constant value   [ kgen_utils.f90(178,21) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.057
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 116 
   remark #15477: vector loop cost: 15.250 
   remark #15478: estimated potential speedup: 6.980 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(175,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.080
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(175,5)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

kgen_utils.f90(166,29):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
kgen_utils.f90(163,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_perturb_real4_dim1_] kgen_utils.f90:163

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   36[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm19 k1-k3]
        
    Routine temporaries
        Total         :     235
            Global    :      81
            Local     :     154
        Regenerable   :      24
        Spilled       :      23
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       7 [7.00e+00 ~ 1.0%]
            Writes    :       9 [9.00e+00 ~ 1.2%]
        Spills        :     496 bytes*
            Reads     :      27 [6.43e+01 ~ 8.9%]
            Writes    :      27 [3.99e+01 ~ 5.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_PERTURB_REAL4_DIM2

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_PERTURB_REAL4_DIM2) [10/18=55.6%] kgen_utils.f90(183,12)
  -> EXTERN: (191,10) for_random_seed_bit_size
  -> EXTERN: (192,5) for_alloc_allocatable
  -> EXTERN: (192,5) for_check_mult_overflow64
  -> EXTERN: (194,10) for_random_seed_put
  -> EXTERN: (197,18) for_random_number_single
  -> EXTERN: (202,5) for_dealloc_allocatable
  -> EXTERN: (203,1) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at kgen_utils.f90(193,5)
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.250 
   remark #15478: estimated potential speedup: 6.590 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(193,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(195,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at kgen_utils.f90(196,9)
      remark #15329: vectorization support: scatter was emulated for the variable <*var(idx1,idx2)>, strided by non-constant value   [ kgen_utils.f90(199,13) ]
      remark #15415: vectorization support: gather was generated for the variable <*var(idx1,idx2)>, strided by non-constant value   [ kgen_utils.f90(199,30) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.057
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 116 
      remark #15477: vector loop cost: 15.250 
      remark #15478: estimated potential speedup: 6.980 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at kgen_utils.f90(196,9)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.080
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at kgen_utils.f90(196,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

kgen_utils.f90(186,29):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
kgen_utils.f90(183,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_perturb_real4_dim2_] kgen_utils.f90:183

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   37[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm19 k1-k3]
        
    Routine temporaries
        Total         :     236
            Global    :      86
            Local     :     150
        Regenerable   :      25
        Spilled       :      34
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       7 [7.00e+00 ~ 0.2%]
            Writes    :       9 [9.00e+00 ~ 0.3%]
        Spills        :     608 bytes*
            Reads     :      56 [4.82e+02 ~ 15.3%]
            Writes    :      53 [2.94e+02 ~ 9.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_PERTURB_REAL4_DIM3

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_PERTURB_REAL4_DIM3) [11/18=61.1%] kgen_utils.f90(205,12)
  -> EXTERN: (213,10) for_random_seed_bit_size
  -> EXTERN: (214,5) for_alloc_allocatable
  -> EXTERN: (214,5) for_check_mult_overflow64
  -> EXTERN: (216,10) for_random_seed_put
  -> EXTERN: (220,22) for_random_number_single
  -> EXTERN: (226,5) for_dealloc_allocatable
  -> EXTERN: (227,1) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at kgen_utils.f90(215,5)
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.250 
   remark #15478: estimated potential speedup: 6.590 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(215,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(217,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at kgen_utils.f90(218,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at kgen_utils.f90(219,13)
         remark #15329: vectorization support: scatter was emulated for the variable <*var(idx1,idx2,idx3)>, strided by non-constant value   [ kgen_utils.f90(222,17) ]
         remark #15415: vectorization support: gather was generated for the variable <*var(idx1,idx2,idx3)>, strided by non-constant value   [ kgen_utils.f90(222,39) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.057
         remark #15300: LOOP WAS VECTORIZED
         remark #15460: masked strided loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 116 
         remark #15477: vector loop cost: 15.250 
         remark #15478: estimated potential speedup: 6.980 
         remark #15482: vectorized math library calls: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at kgen_utils.f90(219,13)
      <Remainder loop for vectorization>
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.080
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at kgen_utils.f90(219,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

kgen_utils.f90(208,29):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
kgen_utils.f90(205,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_perturb_real4_dim3_] kgen_utils.f90:205

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   37[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm19 k1-k3]
        
    Routine temporaries
        Total         :     252
            Global    :      92
            Local     :     160
        Regenerable   :      25
        Spilled       :      40
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       7 [7.00e+00 ~ 0.0%]
            Writes    :       9 [9.00e+00 ~ 0.1%]
        Spills        :     656 bytes*
            Reads     :      63 [2.61e+03 ~ 16.1%]
            Writes    :      58 [1.46e+03 ~ 9.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_PERTURB_REAL8_DIM1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_PERTURB_REAL8_DIM1) [12/18=66.7%] kgen_utils.f90(229,12)
  -> EXTERN: (237,10) for_random_seed_bit_size
  -> EXTERN: (238,5) for_alloc_allocatable
  -> EXTERN: (238,5) for_check_mult_overflow64
  -> EXTERN: (240,10) for_random_seed_put
  -> EXTERN: (242,14) for_random_number
  -> EXTERN: (246,5) for_dealloc_allocatable
  -> EXTERN: (247,1) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at kgen_utils.f90(239,5)
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.250 
   remark #15478: estimated potential speedup: 6.590 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(239,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(241,5)
   remark #15329: vectorization support: scatter was emulated for the variable <*var(idx1)>, strided by non-constant value   [ kgen_utils.f90(244,9) ]
   remark #15328: vectorization support: gather was emulated for the variable <*var(idx1)>, strided by non-constant value   [ kgen_utils.f90(244,21) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.068
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 116 
   remark #15477: vector loop cost: 25.750 
   remark #15478: estimated potential speedup: 4.500 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(241,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.098
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(241,5)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

kgen_utils.f90(232,29):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
kgen_utils.f90(229,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_perturb_real8_dim1_] kgen_utils.f90:229

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   34[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm17 k1-k3]
        
    Routine temporaries
        Total         :     202
            Global    :      71
            Local     :     131
        Regenerable   :      24
        Spilled       :      18
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       7 [7.00e+00 ~ 1.2%]
            Writes    :       9 [9.00e+00 ~ 1.5%]
        Spills        :     352 bytes*
            Reads     :      20 [4.25e+01 ~ 7.0%]
            Writes    :      21 [3.40e+01 ~ 5.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_PERTURB_REAL8_DIM2

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_PERTURB_REAL8_DIM2) [13/18=72.2%] kgen_utils.f90(249,12)
  -> EXTERN: (257,10) for_random_seed_bit_size
  -> EXTERN: (258,5) for_alloc_allocatable
  -> EXTERN: (258,5) for_check_mult_overflow64
  -> EXTERN: (260,10) for_random_seed_put
  -> EXTERN: (263,18) for_random_number
  -> EXTERN: (268,5) for_dealloc_allocatable
  -> EXTERN: (269,1) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at kgen_utils.f90(259,5)
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.250 
   remark #15478: estimated potential speedup: 6.590 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(259,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(261,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at kgen_utils.f90(262,9)
      remark #15329: vectorization support: scatter was emulated for the variable <*var(idx1,idx2)>, strided by non-constant value   [ kgen_utils.f90(265,13) ]
      remark #15328: vectorization support: gather was emulated for the variable <*var(idx1,idx2)>, strided by non-constant value   [ kgen_utils.f90(265,30) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.068
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 116 
      remark #15477: vector loop cost: 25.750 
      remark #15478: estimated potential speedup: 4.500 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at kgen_utils.f90(262,9)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.098
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at kgen_utils.f90(262,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

kgen_utils.f90(252,29):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
kgen_utils.f90(249,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_perturb_real8_dim2_] kgen_utils.f90:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   35[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm17 k1-k3]
        
    Routine temporaries
        Total         :     203
            Global    :      76
            Local     :     127
        Regenerable   :      25
        Spilled       :      28
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       7 [7.00e+00 ~ 0.3%]
            Writes    :       9 [9.00e+00 ~ 0.4%]
        Spills        :     432 bytes*
            Reads     :      46 [3.48e+02 ~ 13.8%]
            Writes    :      45 [2.69e+02 ~ 10.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_PERTURB_REAL8_DIM3

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_PERTURB_REAL8_DIM3) [14/18=77.8%] kgen_utils.f90(271,12)
  -> EXTERN: (279,10) for_random_seed_bit_size
  -> EXTERN: (280,5) for_alloc_allocatable
  -> EXTERN: (280,5) for_check_mult_overflow64
  -> EXTERN: (282,10) for_random_seed_put
  -> EXTERN: (286,22) for_random_number
  -> EXTERN: (292,5) for_dealloc_allocatable
  -> EXTERN: (293,1) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at kgen_utils.f90(281,5)
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.250 
   remark #15478: estimated potential speedup: 6.590 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at kgen_utils.f90(281,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference RNDM_SEED(var) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at kgen_utils.f90(283,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at kgen_utils.f90(284,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at kgen_utils.f90(285,13)
         remark #15329: vectorization support: scatter was emulated for the variable <*var(idx1,idx2,idx3)>, strided by non-constant value   [ kgen_utils.f90(288,17) ]
         remark #15328: vectorization support: gather was emulated for the variable <*var(idx1,idx2,idx3)>, strided by non-constant value   [ kgen_utils.f90(288,39) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.068
         remark #15300: LOOP WAS VECTORIZED
         remark #15460: masked strided loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 116 
         remark #15477: vector loop cost: 25.750 
         remark #15478: estimated potential speedup: 4.500 
         remark #15482: vectorized math library calls: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at kgen_utils.f90(285,13)
      <Remainder loop for vectorization>
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.098
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at kgen_utils.f90(285,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

kgen_utils.f90(274,29):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
kgen_utils.f90(271,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_perturb_real8_dim3_] kgen_utils.f90:271

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   35[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm17 k1-k3]
        
    Routine temporaries
        Total         :     219
            Global    :      82
            Local     :     137
        Regenerable   :      25
        Spilled       :      34
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       7 [7.00e+00 ~ 0.1%]
            Writes    :       9 [9.00e+00 ~ 0.1%]
        Spills        :     480 bytes*
            Reads     :      55 [1.92e+03 ~ 15.2%]
            Writes    :      49 [1.29e+03 ~ 10.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_PRINT_CHECK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_PRINT_CHECK) [15/18=83.3%] kgen_utils.f90(324,12)
  -> EXTERN: (328,4) __resetsp_inlined
  -> EXTERN: (328,4) for_write_seq_lis_xmit
  -> EXTERN: (328,4) for_write_seq_lis_xmit
  -> EXTERN: (328,4) for_write_seq_lis
  -> EXTERN: (328,4) __getsp_inlined
  -> EXTERN: (328,16) for_trim
  -> EXTERN: (328,21) _alloca
  -> EXTERN: (330,4) __resetsp_inlined
  -> EXTERN: (330,4) for_write_seq_lis_xmit
  -> EXTERN: (330,4) for_write_seq_lis_xmit
  -> EXTERN: (330,4) for_write_seq_lis
  -> EXTERN: (330,4) __getsp_inlined
  -> EXTERN: (330,16) for_trim
  -> EXTERN: (330,21) _alloca
  -> EXTERN: (331,4) __resetsp_inlined
  -> EXTERN: (331,4) for_write_seq_lis_xmit
  -> EXTERN: (331,4) for_write_seq_lis_xmit
  -> EXTERN: (331,4) for_write_seq_lis
  -> EXTERN: (331,4) __getsp_inlined
  -> EXTERN: (331,16) for_trim
  -> EXTERN: (331,21) _alloca
  -> EXTERN: (332,4) __resetsp_inlined
  -> EXTERN: (332,4) for_write_seq_lis_xmit
  -> EXTERN: (332,4) for_write_seq_lis_xmit
  -> EXTERN: (332,4) for_write_seq_lis
  -> EXTERN: (332,4) __getsp_inlined
  -> EXTERN: (332,16) for_trim
  -> EXTERN: (332,21) _alloca
  -> EXTERN: (333,4) __resetsp_inlined
  -> EXTERN: (333,4) for_write_seq_lis_xmit
  -> EXTERN: (333,4) for_write_seq_lis_xmit
  -> EXTERN: (333,4) for_write_seq_lis
  -> EXTERN: (333,4) __getsp_inlined
  -> EXTERN: (333,16) for_trim
  -> EXTERN: (333,21) _alloca
  -> EXTERN: (336,9) for_write_seq_lis
  -> EXTERN: (336,9) for_write_seq_lis_xmit
  -> EXTERN: (336,9) __resetsp_inlined
  -> EXTERN: (336,9) __getsp_inlined
  -> EXTERN: (336,20) for_trim
  -> EXTERN: (336,25) _alloca
  -> EXTERN: (338,9) __resetsp_inlined
  -> EXTERN: (338,9) for_write_seq_lis_xmit
  -> EXTERN: (338,9) for_write_seq_lis
  -> EXTERN: (338,9) __getsp_inlined
  -> EXTERN: (338,20) for_trim
  -> EXTERN: (338,25) _alloca


    Report from: Code generation optimizations [cg]

kgen_utils.f90(324,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_print_check_] kgen_utils.f90:324

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :     219
            Global    :      47
            Local     :     172
        Regenerable   :     118
        Spilled       :       5
        
    Routine stack
        Variables     :     328 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      40 [3.50e+01 ~ 14.8%]
        Spills        :      40 bytes*
            Reads     :       5 [5.00e+00 ~ 2.1%]
            Writes    :       5 [5.00e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_GET_NEWUNIT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_GET_NEWUNIT) [16/18=88.9%] kgen_utils.f90(342,10)
  -> EXTERN: (349,16) for_inquire


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at kgen_utils.f90(348,4)
   remark #15523: loop was not vectorized: loop control variable counter was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

kgen_utils.f90(342,10):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_get_newunit_] kgen_utils.f90:342

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8 r14-r15]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :      10
        Spilled       :       3
        
    Routine stack
        Variables     :      76 bytes*
            Reads     :       1 [5.00e+00 ~ 5.3%]
            Writes    :       2 [1.00e+01 ~ 10.6%]
        Spills        :      24 bytes*
            Reads     :       6 [3.00e+00 ~ 3.2%]
            Writes    :       3 [3.00e+00 ~ 3.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_ERROR_STOP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_ERROR_STOP) [17/18=94.4%] kgen_utils.f90(357,12)
  -> EXTERN: (361,5) for_write_seq_lis
  -> EXTERN: (362,10) for_stop_core


    Report from: Code generation optimizations [cg]

kgen_utils.f90(357,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_error_stop_] kgen_utils.f90:357

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      27
            Global    :       7
            Local     :      20
        Regenerable   :      17
        Spilled       :       0
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [3.00e+00 ~ 10.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: KGEN_UTILS_MOD::KGEN_INIT_CHECK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (KGEN_UTILS_MOD::KGEN_INIT_CHECK) [18/18=100.0%] kgen_utils.f90(295,12)


    Report from: Code generation optimizations [cg]

kgen_utils.f90(295,12):remark #34051: REGISTER ALLOCATION : [kgen_utils_mod_mp_kgen_init_check_] kgen_utils.f90:295

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      10
            Local     :      10
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
